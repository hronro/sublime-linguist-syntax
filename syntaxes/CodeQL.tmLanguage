<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>QL</string>
	<key>scopeName</key>
	<string>source.ql</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#module-member</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>abstract</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.abstract.ql</string>
			<key>match</key>
			<string>(?x)\b(?:abstract)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>additional</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.additional.ql</string>
			<key>match</key>
			<string>(?x)\b(?:additional)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>and</key>
		<dict>
			<key>name</key>
			<string>keyword.other.and.ql</string>
			<key>match</key>
			<string>(?x)\b(?:and)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>annotation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#bindingset-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#language-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pragma-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#annotation-keyword</string>
				</dict>
			</array>
		</dict>
		<key>annotation-keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#abstract</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#additional</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bindingset</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#cached</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#default</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#deprecated</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#external</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#final</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#language</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#library</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#override</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pragma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#private</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#query</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#signature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#transient</string>
				</dict>
			</array>
		</dict>
		<key>any</key>
		<dict>
			<key>name</key>
			<string>keyword.quantifier.any.ql</string>
			<key>match</key>
			<string>(?x)\b(?:any)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>arithmetic-operator</key>
		<dict>
			<key>name</key>
			<string>keyword.operator.arithmetic.ql</string>
			<key>match</key>
			<string>(?x)\+|-|\*|/|%</string>
		</dict>
		<key>as</key>
		<dict>
			<key>name</key>
			<string>keyword.other.as.ql</string>
			<key>match</key>
			<string>(?x)\b(?:as)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>asc</key>
		<dict>
			<key>name</key>
			<string>keyword.order.asc.ql</string>
			<key>match</key>
			<string>(?x)\b(?:asc)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>at-lower-id</key>
		<dict>
			<key>match</key>
			<string>(?x)@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>avg</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.avg.ql</string>
			<key>match</key>
			<string>(?x)\b(?:avg)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>bindingset</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.bindingset.ql</string>
			<key>match</key>
			<string>(?x)\b(?:bindingset)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>bindingset-annotation</key>
		<dict>
			<key>name</key>
			<string>meta.block.bindingset-annotation.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:bindingset)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?! (?:\s | $ | (?:// | /\*)) | \[ ) | (?&lt;=\])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#bindingset-annotation-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#bindingset</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>bindingset-annotation-body</key>
		<dict>
			<key>name</key>
			<string>meta.block.bindingset-annotation-body.ql</string>
			<key>begin</key>
			<string>(?x)((?:\[))</string>
			<key>end</key>
			<string>(?x)((?:\]))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.parameter.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#open-bracket</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#close-bracket</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>boolean</key>
		<dict>
			<key>name</key>
			<string>keyword.type.boolean.ql</string>
			<key>match</key>
			<string>(?x)\b(?:boolean)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>by</key>
		<dict>
			<key>name</key>
			<string>keyword.order.by.ql</string>
			<key>match</key>
			<string>(?x)\b(?:by)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>cached</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.cached.ql</string>
			<key>match</key>
			<string>(?x)\b(?:cached)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>class</key>
		<dict>
			<key>name</key>
			<string>keyword.other.class.ql</string>
			<key>match</key>
			<string>(?x)\b(?:class)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>class-body</key>
		<dict>
			<key>name</key>
			<string>meta.block.class-body.ql</string>
			<key>begin</key>
			<string>(?x)((?:\{))</string>
			<key>end</key>
			<string>(?x)((?:\}))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class-member</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#open-brace</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#close-brace</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>class-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.block.class-declaration.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:class)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?&lt;= \} | ; )</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#extends-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#class</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>class-member</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#predicate-or-field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
			</array>
		</dict>
		<key>close-brace</key>
		<dict>
			<key>name</key>
			<string>punctuation.curlybrace.close.ql</string>
			<key>match</key>
			<string>(?x)\}</string>
		</dict>
		<key>close-bracket</key>
		<dict>
			<key>name</key>
			<string>punctuation.squarebracket.close.ql</string>
			<key>match</key>
			<string>(?x)\]</string>
		</dict>
		<key>close-paren</key>
		<dict>
			<key>name</key>
			<string>punctuation.parenthesis.close.ql</string>
			<key>match</key>
			<string>(?x)\)</string>
		</dict>
		<key>comma</key>
		<dict>
			<key>name</key>
			<string>punctuation.separator.comma.ql</string>
			<key>match</key>
			<string>(?x),</string>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>comment.block.documentation.ql</string>
					<key>begin</key>
					<string>(?x)/\*\*</string>
					<key>end</key>
					<string>(?x)\*/</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?x)(?&lt;=/\*\*)([^*]|\*(?!/))*$</string>
							<key>while</key>
							<string>(?x)(^|\G)\s*([^*]|\*(?!/))(?=([^*]|[*](?!/))*$)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>name</key>
									<string>keyword.tag.ql</string>
									<key>match</key>
									<string>(?x)\G\s* (@\S+)</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.ql</string>
					<key>begin</key>
					<string>(?x)/\*</string>
					<key>end</key>
					<string>(?x)\*/</string>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.line.double-slash.ql</string>
					<key>match</key>
					<string>(?x)//.*$</string>
				</dict>
			</array>
		</dict>
		<key>comment-start</key>
		<dict>
			<key>match</key>
			<string>(?x)// | /\*</string>
		</dict>
		<key>comparison-operator</key>
		<dict>
			<key>name</key>
			<string>keyword.operator.comparison.ql</string>
			<key>match</key>
			<string>(?x)=|\!\=</string>
		</dict>
		<key>concat</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.concat.ql</string>
			<key>match</key>
			<string>(?x)\b(?:concat)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>count</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.count.ql</string>
			<key>match</key>
			<string>(?x)\b(?:count)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>date</key>
		<dict>
			<key>name</key>
			<string>keyword.type.date.ql</string>
			<key>match</key>
			<string>(?x)\b(?:date)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>default</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.default.ql</string>
			<key>match</key>
			<string>(?x)\b(?:default)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>deprecated</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.deprecated.ql</string>
			<key>match</key>
			<string>(?x)\b(?:deprecated)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>desc</key>
		<dict>
			<key>name</key>
			<string>keyword.order.desc.ql</string>
			<key>match</key>
			<string>(?x)\b(?:desc)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>dont-care</key>
		<dict>
			<key>name</key>
			<string>variable.language.dont-care.ql</string>
			<key>match</key>
			<string>(?x)\b(?:_)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>dot</key>
		<dict>
			<key>name</key>
			<string>punctuation.accessor.ql</string>
			<key>match</key>
			<string>(?x)\.</string>
		</dict>
		<key>dotdot</key>
		<dict>
			<key>name</key>
			<string>punctuation.operator.range.ql</string>
			<key>match</key>
			<string>(?x)\.\.</string>
		</dict>
		<key>else</key>
		<dict>
			<key>name</key>
			<string>keyword.other.else.ql</string>
			<key>match</key>
			<string>(?x)\b(?:else)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>end-of-as-clause</key>
		<dict>
			<key>match</key>
			<string>(?x)(?: (?&lt;=(?:[0-9A-Za-z_])) (?!(?:[0-9A-Za-z_])) (?&lt;!(?&lt;!(?:[0-9A-Za-z_]))as)) | (?=\s* (?!(?:// | /\*) | (?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))) \S) | (?=\s* (?:(?:(?:\b(?:_)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:and)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:any)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:as)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:asc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:avg)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:by)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:class)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:concat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:count)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:desc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:else)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:exists)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:extends)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:false)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:forall)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:forex)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:if)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:implies)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:import)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:in)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:max)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:min)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:module)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:newtype)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:none)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:not)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:order)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:rank)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:result)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:sum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:super)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:then)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:this)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:true)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:unique)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:where)(?:(?!(?:[0-9A-Za-z_])))))))</string>
		</dict>
		<key>end-of-id</key>
		<dict>
			<key>match</key>
			<string>(?x)(?!(?:[0-9A-Za-z_]))</string>
		</dict>
		<key>exists</key>
		<dict>
			<key>name</key>
			<string>keyword.quantifier.exists.ql</string>
			<key>match</key>
			<string>(?x)\b(?:exists)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>expr-as-clause</key>
		<dict>
			<key>name</key>
			<string>meta.block.expr-as-clause.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:as)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?:(?: (?&lt;=(?:[0-9A-Za-z_])) (?!(?:[0-9A-Za-z_])) (?&lt;!(?&lt;!(?:[0-9A-Za-z_]))as)) | (?=\s* (?!(?:// | /\*) | (?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))) \S) | (?=\s* (?:(?:(?:\b(?:_)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:and)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:any)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:as)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:asc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:avg)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:by)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:class)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:concat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:count)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:desc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:else)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:exists)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:extends)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:false)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:forall)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:forex)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:if)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:implies)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:import)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:in)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:max)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:min)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:module)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:newtype)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:none)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:not)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:order)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:rank)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:result)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:sum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:super)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:then)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:this)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:true)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:unique)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))))))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#as</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>extends</key>
		<dict>
			<key>name</key>
			<string>keyword.other.extends.ql</string>
			<key>match</key>
			<string>(?x)\b(?:extends)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>extends-clause</key>
		<dict>
			<key>name</key>
			<string>meta.block.extends-clause.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:extends)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?= \{ )</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#extends</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>external</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.external.ql</string>
			<key>match</key>
			<string>(?x)\b(?:external)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>false</key>
		<dict>
			<key>name</key>
			<string>constant.language.boolean.false.ql</string>
			<key>match</key>
			<string>(?x)\b(?:false)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>final</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.final.ql</string>
			<key>match</key>
			<string>(?x)\b(?:final)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>float</key>
		<dict>
			<key>name</key>
			<string>keyword.type.float.ql</string>
			<key>match</key>
			<string>(?x)\b(?:float)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>float-literal</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.decimal.ql</string>
			<key>match</key>
			<string>(?x)-?[0-9]+\.[0-9]+(?![0-9])</string>
		</dict>
		<key>forall</key>
		<dict>
			<key>name</key>
			<string>keyword.quantifier.forall.ql</string>
			<key>match</key>
			<string>(?x)\b(?:forall)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>forex</key>
		<dict>
			<key>name</key>
			<string>keyword.quantifier.forex.ql</string>
			<key>match</key>
			<string>(?x)\b(?:forex)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>from</key>
		<dict>
			<key>name</key>
			<string>keyword.other.from.ql</string>
			<key>match</key>
			<string>(?x)\b(?:from)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>from-section</key>
		<dict>
			<key>name</key>
			<string>meta.block.from-section.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:from)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?= (?:\b(?:select)(?:(?!(?:[0-9A-Za-z_])))) | (?:\b(?:where)(?:(?!(?:[0-9A-Za-z_])))) )</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.parameter.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))(?=\s*(?:,|(?:\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|$))</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-qualifier</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.parameter.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#from</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>id-character</key>
		<dict>
			<key>match</key>
			<string>(?x)[0-9A-Za-z_]</string>
		</dict>
		<key>if</key>
		<dict>
			<key>name</key>
			<string>keyword.other.if.ql</string>
			<key>match</key>
			<string>(?x)\b(?:if)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>implements</key>
		<dict>
			<key>name</key>
			<string>keyword.other.implements.ql</string>
			<key>match</key>
			<string>(?x)\b(?:implements)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>implements-clause</key>
		<dict>
			<key>name</key>
			<string>meta.block.implements-clause.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:implements)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?= \{ )</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#implements</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>implies</key>
		<dict>
			<key>name</key>
			<string>keyword.other.implies.ql</string>
			<key>match</key>
			<string>(?x)\b(?:implies)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>import</key>
		<dict>
			<key>name</key>
			<string>keyword.other.import.ql</string>
			<key>match</key>
			<string>(?x)\b(?:import)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>import-as-clause</key>
		<dict>
			<key>name</key>
			<string>meta.block.import-as-clause.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:as)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?:(?: (?&lt;=(?:[0-9A-Za-z_])) (?!(?:[0-9A-Za-z_])) (?&lt;!(?&lt;!(?:[0-9A-Za-z_]))as)) | (?=\s* (?!(?:// | /\*) | (?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))) \S) | (?=\s* (?:(?:(?:\b(?:_)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:and)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:any)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:as)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:asc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:avg)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:by)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:class)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:concat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:count)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:desc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:else)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:exists)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:extends)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:false)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:forall)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:forex)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:if)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:implies)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:import)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:in)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:max)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:min)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:module)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:newtype)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:none)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:not)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:order)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:rank)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:result)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:sum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:super)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:then)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:this)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:true)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:unique)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))))))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.namespace.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#as</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>import-directive</key>
		<dict>
			<key>name</key>
			<string>meta.block.import-directive.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:import)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))) (?!\s*(\.|\:\:))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.namespace.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#import</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.namespace.ql</string>
				</dict>
			</dict>
		</dict>
		<key>in</key>
		<dict>
			<key>name</key>
			<string>keyword.other.in.ql</string>
			<key>match</key>
			<string>(?x)\b(?:in)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>instanceof</key>
		<dict>
			<key>name</key>
			<string>keyword.other.instanceof.ql</string>
			<key>match</key>
			<string>(?x)\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>int</key>
		<dict>
			<key>name</key>
			<string>keyword.type.int.ql</string>
			<key>match</key>
			<string>(?x)\b(?:int)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>int-literal</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.decimal.ql</string>
			<key>match</key>
			<string>(?x)-?[0-9]+(?![0-9])</string>
		</dict>
		<key>keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#dont-care</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#and</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#any</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#as</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#asc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#avg</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#by</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#concat</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#count</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#date</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#desc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#else</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#exists</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#extends</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#false</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#float</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#forall</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#forex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#from</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#if</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#implies</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#in</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#instanceof</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#int</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#max</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#min</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#newtype</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#none</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#not</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#or</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#order</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#predicate</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#rank</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#result</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#select</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strictconcat</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strictcount</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strictsum</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#sum</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#super</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#then</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#this</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#true</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unique</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#where</string>
				</dict>
			</array>
		</dict>
		<key>language</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.language.ql</string>
			<key>match</key>
			<string>(?x)\b(?:language)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>language-annotation</key>
		<dict>
			<key>name</key>
			<string>meta.block.language-annotation.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:language)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?! (?:\s | $ | (?:// | /\*)) | \[ ) | (?&lt;=\])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#language-annotation-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#language</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>language-annotation-body</key>
		<dict>
			<key>name</key>
			<string>meta.block.language-annotation-body.ql</string>
			<key>begin</key>
			<string>(?x)((?:\[))</string>
			<key>end</key>
			<string>(?x)((?:\]))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>storage.modifier.ql</string>
					<key>match</key>
					<string>(?x)\b(?:monotonicAggregates)(?:(?!(?:[0-9A-Za-z_])))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#open-bracket</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#close-bracket</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>library</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.library.ql</string>
			<key>match</key>
			<string>(?x)\b(?:library)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#float-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#int-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-literal</string>
				</dict>
			</array>
		</dict>
		<key>lower-id</key>
		<dict>
			<key>match</key>
			<string>(?x)\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>max</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.max.ql</string>
			<key>match</key>
			<string>(?x)\b(?:max)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>min</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.min.ql</string>
			<key>match</key>
			<string>(?x)\b(?:min)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>module</key>
		<dict>
			<key>name</key>
			<string>keyword.other.module.ql</string>
			<key>match</key>
			<string>(?x)\b(?:module)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>module-body</key>
		<dict>
			<key>name</key>
			<string>meta.block.module-body.ql</string>
			<key>begin</key>
			<string>(?x)((?:\{))</string>
			<key>end</key>
			<string>(?x)((?:\}))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-member</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#open-brace</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#close-brace</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>module-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.block.module-declaration.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:module)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?&lt;=\}|;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#implements-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.namespace.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#module</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>module-member</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#import-directive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-as-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#newtype-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#newtype-branch-name-with-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#predicate-parameter-list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#predicate-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#select-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#predicate-or-field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#annotation</string>
				</dict>
			</array>
		</dict>
		<key>module-qualifier</key>
		<dict>
			<key>name</key>
			<string>entity.name.type.namespace.ql</string>
			<key>match</key>
			<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))) (?=\s*\:\:)</string>
		</dict>
		<key>newtype</key>
		<dict>
			<key>name</key>
			<string>keyword.other.newtype.ql</string>
			<key>match</key>
			<string>(?x)\b(?:newtype)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>newtype-branch-name-with-prefix</key>
		<dict>
			<key>name</key>
			<string>meta.block.newtype-branch-name-with-prefix.ql</string>
			<key>begin</key>
			<string>(?x)\= | (?:\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))</string>
			<key>end</key>
			<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#or</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comparison-operator</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.ql</string>
				</dict>
			</dict>
		</dict>
		<key>newtype-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.block.newtype-declaration.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:newtype)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#newtype</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.ql</string>
				</dict>
			</dict>
		</dict>
		<key>non-context-sensitive</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator-or-punctuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keyword</string>
				</dict>
			</array>
		</dict>
		<key>none</key>
		<dict>
			<key>name</key>
			<string>keyword.quantifier.none.ql</string>
			<key>match</key>
			<string>(?x)\b(?:none)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>not</key>
		<dict>
			<key>name</key>
			<string>keyword.other.not.ql</string>
			<key>match</key>
			<string>(?x)\b(?:not)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>open-brace</key>
		<dict>
			<key>name</key>
			<string>punctuation.curlybrace.open.ql</string>
			<key>match</key>
			<string>(?x)\{</string>
		</dict>
		<key>open-bracket</key>
		<dict>
			<key>name</key>
			<string>punctuation.squarebracket.open.ql</string>
			<key>match</key>
			<string>(?x)\[</string>
		</dict>
		<key>open-paren</key>
		<dict>
			<key>name</key>
			<string>punctuation.parenthesis.open.ql</string>
			<key>match</key>
			<string>(?x)\(</string>
		</dict>
		<key>operator-or-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#relational-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comparison-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arithmetic-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#semicolon</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#dot</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#dotdot</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pipe</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#open-paren</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#close-paren</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#open-brace</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#close-brace</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#open-bracket</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#close-bracket</string>
				</dict>
			</array>
		</dict>
		<key>or</key>
		<dict>
			<key>name</key>
			<string>keyword.other.or.ql</string>
			<key>match</key>
			<string>(?x)\b(?:or)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>order</key>
		<dict>
			<key>name</key>
			<string>keyword.order.order.ql</string>
			<key>match</key>
			<string>(?x)\b(?:order)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>override</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.override.ql</string>
			<key>match</key>
			<string>(?x)\b(?:override)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>pipe</key>
		<dict>
			<key>name</key>
			<string>punctuation.separator.pipe.ql</string>
			<key>match</key>
			<string>(?x)\|</string>
		</dict>
		<key>pragma</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.pragma.ql</string>
			<key>match</key>
			<string>(?x)\b(?:pragma)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>pragma-annotation</key>
		<dict>
			<key>name</key>
			<string>meta.block.pragma-annotation.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:pragma)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?! (?:\s | $ | (?:// | /\*)) | \[ ) | (?&lt;=\])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#pragma-annotation-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pragma</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>pragma-annotation-body</key>
		<dict>
			<key>name</key>
			<string>meta.block.pragma-annotation-body.ql</string>
			<key>begin</key>
			<string>(?x)((?:\[))</string>
			<key>end</key>
			<string>(?x)((?:\]))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>storage.modifier.ql</string>
					<key>match</key>
					<string>(?x)\b(?:inline|noinline|nomagic|noopt)\b</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#open-bracket</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#close-bracket</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>predicate</key>
		<dict>
			<key>name</key>
			<string>keyword.other.predicate.ql</string>
			<key>match</key>
			<string>(?x)\b(?:predicate)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>predicate-body</key>
		<dict>
			<key>name</key>
			<string>meta.block.predicate-body.ql</string>
			<key>begin</key>
			<string>(?x)((?:\{))</string>
			<key>end</key>
			<string>(?x)((?:\}))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#predicate-body-contents</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#open-brace</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#close-brace</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>predicate-body-contents</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expr-as-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-qualifier</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.function.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\s*(?:\*|\+)?\s*(?=\()</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
		</dict>
		<key>predicate-or-field-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.block.predicate-or-field-declaration.ql</string>
			<key>begin</key>
			<string>(?x)(?:(?=(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))))(?!(?:(?:(?:\b(?:_)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:and)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:any)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:as)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:asc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:avg)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:by)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:class)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:concat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:count)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:desc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:else)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:exists)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:extends)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:false)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:forall)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:forex)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:if)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:implies)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:import)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:in)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:max)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:min)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:module)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:newtype)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:none)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:not)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:order)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:rank)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:result)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:sum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:super)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:then)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:this)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:true)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:unique)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))))|(?:(?:(?:\b(?:abstract)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:additional)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:bindingset)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:cached)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:default)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:deprecated)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:external)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:final)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:language)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:library)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:override)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:pragma)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:private)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:query)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:signature)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:transient)(?:(?!(?:[0-9A-Za-z_])))))))) | (?=(?:(?:(?:\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))))) | (?=(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?&lt;=\}|;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#predicate-parameter-list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#predicate-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-qualifier</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.field.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))(?=\s*;)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.function.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
		</dict>
		<key>predicate-parameter-list</key>
		<dict>
			<key>name</key>
			<string>meta.block.predicate-parameter-list.ql</string>
			<key>begin</key>
			<string>(?x)((?:\())</string>
			<key>end</key>
			<string>(?x)((?:\)))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.parameter.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))(?=\s*(?:,|\)))</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-qualifier</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.parameter.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#open-paren</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#close-paren</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>predicate-start-keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#boolean</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#date</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#float</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#int</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#predicate</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
			</array>
		</dict>
		<key>private</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.private.ql</string>
			<key>match</key>
			<string>(?x)\b(?:private)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>query</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.query.ql</string>
			<key>match</key>
			<string>(?x)\b(?:query)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>rank</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.rank.ql</string>
			<key>match</key>
			<string>(?x)\b(?:rank)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>relational-operator</key>
		<dict>
			<key>name</key>
			<string>keyword.operator.relational.ql</string>
			<key>match</key>
			<string>(?x)&lt;=|&lt;|&gt;=|&gt;</string>
		</dict>
		<key>result</key>
		<dict>
			<key>name</key>
			<string>variable.language.result.ql</string>
			<key>match</key>
			<string>(?x)\b(?:result)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>select</key>
		<dict>
			<key>name</key>
			<string>keyword.query.select.ql</string>
			<key>match</key>
			<string>(?x)\b(?:select)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>select-as-clause</key>
		<dict>
			<key>match</key>
			<string>(?x)meta.block.select-as-clause.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:as)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?&lt;=(?:[0-9A-Za-z_])(?:(?!(?:[0-9A-Za-z_]))))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#non-context-sensitive</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.ql</string>
					<key>match</key>
					<string>(?x)(?:\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#as</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>select-clause</key>
		<dict>
			<key>name</key>
			<string>meta.block.select-clause.ql</string>
			<key>begin</key>
			<string>(?x)(?=(?:\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:select)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?!(?:\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))|(?:\b(?:select)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#from-section</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#where-section</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#select-section</string>
				</dict>
			</array>
		</dict>
		<key>select-section</key>
		<dict>
			<key>name</key>
			<string>meta.block.select-section.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:select)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?=\n)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#predicate-body-contents</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#select-as-clause</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#select</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>semicolon</key>
		<dict>
			<key>name</key>
			<string>punctuation.separator.statement.ql</string>
			<key>match</key>
			<string>(?x);</string>
		</dict>
		<key>signature</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.signature.ql</string>
			<key>match</key>
			<string>(?x)\b(?:signature)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>simple-id</key>
		<dict>
			<key>match</key>
			<string>(?x)\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>strictconcat</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.strictconcat.ql</string>
			<key>match</key>
			<string>(?x)\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>strictcount</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.strictcount.ql</string>
			<key>match</key>
			<string>(?x)\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>strictsum</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.strictsum.ql</string>
			<key>match</key>
			<string>(?x)\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>string</key>
		<dict>
			<key>name</key>
			<string>keyword.type.string.ql</string>
			<key>match</key>
			<string>(?x)\b(?:string)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>string-escape</key>
		<dict>
			<key>name</key>
			<string>constant.character.escape.ql</string>
			<key>match</key>
			<string>(?x)\\[&quot;\\nrt]</string>
		</dict>
		<key>string-literal</key>
		<dict>
			<key>name</key>
			<string>string.quoted.double.ql</string>
			<key>begin</key>
			<string>(?x)&quot;</string>
			<key>end</key>
			<string>(?x)(&quot;) | ((?:[^\\\n])$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-escape</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ql</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ql</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.ql</string>
				</dict>
			</dict>
		</dict>
		<key>sum</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.sum.ql</string>
			<key>match</key>
			<string>(?x)\b(?:sum)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>super</key>
		<dict>
			<key>name</key>
			<string>variable.language.super.ql</string>
			<key>match</key>
			<string>(?x)\b(?:super)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>then</key>
		<dict>
			<key>name</key>
			<string>keyword.other.then.ql</string>
			<key>match</key>
			<string>(?x)\b(?:then)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>this</key>
		<dict>
			<key>name</key>
			<string>variable.language.this.ql</string>
			<key>match</key>
			<string>(?x)\b(?:this)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>transient</key>
		<dict>
			<key>name</key>
			<string>storage.modifier.transient.ql</string>
			<key>match</key>
			<string>(?x)\b(?:transient)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>true</key>
		<dict>
			<key>name</key>
			<string>constant.language.boolean.true.ql</string>
			<key>match</key>
			<string>(?x)\b(?:true)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>unique</key>
		<dict>
			<key>name</key>
			<string>keyword.aggregate.unique.ql</string>
			<key>match</key>
			<string>(?x)\b(?:unique)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>upper-id</key>
		<dict>
			<key>match</key>
			<string>(?x)\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>where</key>
		<dict>
			<key>name</key>
			<string>keyword.query.where.ql</string>
			<key>match</key>
			<string>(?x)\b(?:where)(?:(?!(?:[0-9A-Za-z_])))</string>
		</dict>
		<key>where-section</key>
		<dict>
			<key>name</key>
			<string>meta.block.where-section.ql</string>
			<key>begin</key>
			<string>(?x)((?:\b(?:where)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>end</key>
			<string>(?x)(?=(?:\b(?:select)(?:(?!(?:[0-9A-Za-z_])))))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#predicate-body-contents</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#where</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>whitespace-or-comment-start</key>
		<dict>
			<key>match</key>
			<string>(?x)\s | $ | (?:// | /\*)</string>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>ql</string>
		<string>qll</string>
	</array>
</dict>
</plist>
