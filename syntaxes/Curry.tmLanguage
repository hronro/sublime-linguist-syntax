<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>Curry</string>
	<key>scopeName</key>
	<string>source.curry</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>name</key>
			<string>meta.declaration.module.curry</string>
			<key>begin</key>
			<string>^(module)\b</string>
			<key>end</key>
			<string>\b(where)\b|(^(?!\s))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module_name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module_exports</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid</string>
					<key>match</key>
					<string>[a-z]+</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.curry keyword.module.curry</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.module.curry</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>meta.import.curry</string>
			<key>begin</key>
			<string>^(import)\b</string>
			<key>end</key>
			<string>(^(?!\s))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.other.curry keyword.import.curry</string>
					<key>match</key>
					<string>\b(qualified|as|hiding)\b</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module_name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module_exports</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.curry keyword.import.curry</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>meta.preprocessor.c pragma.preprocessor.curry</string>
			<key>begin</key>
			<string>^\s*(#)\s*\w+</string>
			<key>end</key>
			<string>$</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.preprocessor.c punctuation.pragma.preprocessor.curry</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>include</key>
			<string>#pragma</string>
		</dict>
		<dict>
			<key>name</key>
			<string>meta.function.foreign-declaration.curry</string>
			<key>begin</key>
			<string>^(foreign)\s+(import|export)((\s+\w+))(\s+\&quot;(\\.|[^\&quot;])*\&quot;)?\s*</string>
			<key>end</key>
			<string>^(?!\s)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#foreign_function_signature</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.foreign.curry</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.foreign.curry</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.foreign.curry</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>string.quoted.double.curry</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>include</key>
			<string>#type_declarations</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function_declarations</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#expression_stuff</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>block_comment</key>
		<dict>
			<key>name</key>
			<string>comment.block.curry</string>
			<key>begin</key>
			<string>\{-(?!#)</string>
			<key>end</key>
			<string>(?&lt;!#)-\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.comment.curry</string>
				</dict>
			</dict>
			<key>applyEndPatternLast</key>
			<true />
		</dict>
		<key>class_declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.class.curry</string>
			<key>begin</key>
			<string>^(\s*)(class)\b</string>
			<key>end</key>
			<string>\b(where)\b|(^(?!\1\s))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.class.curry</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.class.curry</string>
				</dict>
			</dict>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>comment.line.curry</string>
					<key>match</key>
					<string>(--).*$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.comment.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_comment</string>
				</dict>
			</array>
		</dict>
		<key>common_keywords</key>
		<dict>
			<key>name</key>
			<string>keyword.other.curry</string>
			<key>match</key>
			<string>\b(where|case|fcase|of|let|in|default|do|mdo|if|then|else|free)\b</string>
		</dict>
		<key>constructor_signature</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.function.curry</string>
			<key>begin</key>
			<string>^(\s+)([A-Z][\w&apos;]*|\(\W+\))\s*((::)|∷)</string>
			<key>end</key>
			<string>^(?!\1\s)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.other.curry entity.name.constructor.curry</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.double-colon.curry</string>
				</dict>
			</dict>
		</dict>
		<key>ctor_names</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.other.curry entity.name.constructor.curry</string>
					<key>match</key>
					<string>(?&lt;!&apos;)\b[A-Z][\w&apos;]*</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.other.curry entity.name.constructor.curry</string>
					<key>match</key>
					<string>\(\)</string>
				</dict>
			</array>
		</dict>
		<key>data_declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.data.curry</string>
			<key>begin</key>
			<string>^(\s*)(?:(external)\s+)?(data|newtype)\s+([A-Z][\w&apos;]*)?</string>
			<key>end</key>
			<string>^(?!\1\s)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.declaration.data.curry</string>
					<key>match</key>
					<string>where</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([=\|])</string>
					<key>end</key>
					<string>(?&lt;!&apos;)\b([A-Z][\w&apos;]*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.other.curry entity.name.constructor.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#deriving</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constructor_signature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#record_declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.external.curry</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.data.curry</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>constant.other.curry entity.name.type.curry</string>
				</dict>
			</dict>
		</dict>
		<key>deriving</key>
		<dict>
			<key>name</key>
			<string>keyword.other.curry keyword.declaration.data.curry</string>
			<key>match</key>
			<string>\b(deriving)\b</string>
		</dict>
		<key>expression_stuff</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>storage.module.curry entity.name.module.curry</string>
					<key>match</key>
					<string>([A-Z][\w&apos;]*\.)+</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.prelude.curry</string>
					<key>match</key>
					<string>\b(abs|acos|acosh|all|and|any|appendFile|asTypeOf|asin|asinh|atan|atan2|atanh|break|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.prelude.error.curry</string>
					<key>match</key>
					<string>\b(error|undefined)\b</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#infix_op</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.curry punctuation.list.curry</string>
					<key>match</key>
					<string>\[|\]</string>
				</dict>
				<dict>
					<key>name</key>
					<string>punctuation.separator.comma.curry</string>
					<key>match</key>
					<string>,</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.function.infix.curry</string>
					<key>match</key>
					<string>(`)([A-Z][\w&apos;]*\.)*[a-z][\w&apos;]*(`)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.curry</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>record.expression.curry</string>
					<key>begin</key>
					<string>(\{)(?!-)</string>
					<key>end</key>
					<string>(?&lt;!-)(\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&lt;!&apos;)\b[a-z][\w&apos;]+\s+(=)</string>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.curry</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression_stuff</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry punctuation.record.curry</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry punctuation.record.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.other.curry entity.name.constructor.curry</string>
					<key>match</key>
					<string>\(\)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.other.curry entity.name.constructor.curry</string>
					<key>match</key>
					<string>\[\]</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.curry</string>
					<key>match</key>
					<string>[@|!%$?~+:.\-*=&lt;/&gt;\\∘→⇒⇔←⇐≤≥≡⋮\[\]]+</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#common_keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quasi_quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ctor_names</string>
				</dict>
			</array>
		</dict>
		<key>external_function_definition</key>
		<dict>
			<key>name</key>
			<string>meta.definition.function.curry</string>
			<key>begin</key>
			<string>^\s*(?&lt;!&apos;)\b([a-z_][\w&apos;]*|\(\W+\))\s+(external)\b</string>
			<key>end</key>
			<string>^(?!\s)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.curry</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.external.curry</string>
				</dict>
			</dict>
		</dict>
		<key>field_signature</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.field.signature.curry</string>
			<key>match</key>
			<string>\b(\w+)\s*(::|∷)\s*([^,}]+)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.curry</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.double-colon.curry</string>
				</dict>
				<key>3</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>fixity_declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.fixity.curry</string>
			<key>match</key>
			<string>\b(infix[lr]?)\b\s*(\d+).+</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.fixity.curry</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.fixity.curry</string>
				</dict>
			</dict>
		</dict>
		<key>foreign_function_signature</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.function.curry</string>
			<key>begin</key>
			<string>(\s*)([a-z_][\w&apos;]*|\(\W+\))\s*((::)|∷)</string>
			<key>end</key>
			<string>^(?!\s)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.curry</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.double-colon.curry</string>
				</dict>
			</dict>
		</dict>
		<key>function_declarations</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#fixity_declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function_signature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function_definition</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#infix_function_definition</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#external_function_definition</string>
				</dict>
			</array>
		</dict>
		<key>function_definition</key>
		<dict>
			<key>name</key>
			<string>meta.definition.function.curry</string>
			<key>begin</key>
			<string>^\s*(?&lt;!&apos;)\b([a-z_][\w&apos;]*|\(\W+\))\s+(?![^\w\s=&apos;&quot;\(\[])(?=((([\w\.,&apos;&quot;_]+|(?:\w+\@)?\(.*\)|\[.*\])\s+)*[=\|]))</string>
			<key>end</key>
			<string>(=)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression_stuff</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.curry</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.curry</string>
				</dict>
			</dict>
		</dict>
		<key>function_signature</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.function.curry</string>
			<key>begin</key>
			<string>^(\s*)(?!--)(?:(\(\W\)|[\w&apos;]+)|[\(\[])(?=[\w&apos;,\s\[\]\(\)]*((?:::)|∷))</string>
			<key>end</key>
			<string>^(?!\1\s)|(?=})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.declaration.function.names.curry</string>
					<key>begin</key>
					<string>(?=.*((::)|∷))</string>
					<key>end</key>
					<string>((::)|∷)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>entity.name.function.curry</string>
							<key>match</key>
							<string>((?&lt;!&apos;)\b[a-z_][\w&apos;]*|\(\W+\))</string>
						</dict>
					</array>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.double-colon.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.curry</string>
				</dict>
			</dict>
		</dict>
		<key>infix_function_definition</key>
		<dict>
			<key>name</key>
			<string>meta.definition.function.curry</string>
			<key>begin</key>
			<string>^\s*(?=(([\w&apos;\.&apos;&quot;]+|(?:\w+@)?\(.*\)|\[.*\])\s+)+([^&quot;&apos;_,\(\);\[\]`\{\}\:\w\s]+|`[a-z][\w&apos;]*`)((\s*[\w&apos;\.&apos;&quot;]+|\s*(?:\w+@)?\(.*\)|\s*\[.*\]))+\s*=)</string>
			<key>end</key>
			<string>( [^&quot;&apos;_,\(\);\[\]`\{\}\:\w\s]+|`[a-z][\w&apos;]*`)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression_stuff</string>
				</dict>
			</array>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.curry</string>
				</dict>
			</dict>
		</dict>
		<key>infix_op</key>
		<dict>
			<key>name</key>
			<string>keyword.operator.curry</string>
			<key>match</key>
			<string>(\([^&quot;&apos;\w \)]+\)|\(,+\))</string>
		</dict>
		<key>instance_declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.instance.curry</string>
			<key>begin</key>
			<string>^(\s*)(instance)\b</string>
			<key>end</key>
			<string>\b(where)\b|(^(?!\1\s))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.instance.curry</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.instance.curry</string>
				</dict>
			</dict>
		</dict>
		<key>literals</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.numeric.curry</string>
					<key>match</key>
					<string>\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.numeric.curry</string>
					<key>match</key>
					<string>\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>string.quoted.double.curry</string>
					<key>begin</key>
					<string>&quot;</string>
					<key>end</key>
					<string>&quot;|$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>constant.character.escape.curry</string>
							<key>match</key>
							<string>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\&quot;&apos;\&amp;])</string>
						</dict>
						<dict>
							<key>name</key>
							<string>constant.character.escape.octal.curry</string>
							<key>match</key>
							<string>\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+</string>
						</dict>
						<dict>
							<key>name</key>
							<string>constant.character.escape.control.curry</string>
							<key>match</key>
							<string>\^[A-Z@\[\]\\\^_]</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>name</key>
					<string>string.quoted.single.curry</string>
					<key>match</key>
					<string>(?x)(&apos;)(?:  [\ -&amp;(-\[\]-~&quot;]|(\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\&quot;&apos;\&amp;]))|(\\o[0-7]+)|(\\x[0-9A-Fa-f]+)|(\^[A-Z@\[\]\\\^_]))(&apos;)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.curry</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.octal.curry</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.hexadecimal.curry</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.control.curry</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module_exports</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.exports.curry</string>
			<key>begin</key>
			<string>(\()</string>
			<key>end</key>
			<string>(\))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.character.escape.multilinestring.curry</string>
					<key>begin</key>
					<string>\\\s*$</string>
					<key>end</key>
					<string>\\</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.function.curry</string>
					<key>match</key>
					<string>(?&lt;!&apos;)\b[a-z][\w&apos;]*</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.declaration.export.data.curry</string>
					<key>begin</key>
					<string>(?&lt;!&apos;)\b([A-Z][\w&apos;]*)\s*(\()</string>
					<key>end</key>
					<string>(\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression_stuff</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.curry entity.name.data.curry</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>storage.type.curry entity.name.data.curry</string>
					<key>match</key>
					<string>(?&lt;!&apos;)\b[A-Z][\w&apos;]*</string>
				</dict>
				<dict>
					<key>name</key>
					<string>punctuation.separator.comma.curry</string>
					<key>match</key>
					<string>,</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#infix_op</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.other.unknown.curry</string>
					<key>match</key>
					<string>\(.*?\)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module_exports</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.module.curry</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.module.curry</string>
				</dict>
			</dict>
		</dict>
		<key>module_name</key>
		<dict>
			<key>name</key>
			<string>entity.name.module.curry entity.name.namespace.curry</string>
			<key>match</key>
			<string>([A-Z][\w&apos;]*)(\.[A-Z][\w&apos;]*)*</string>
		</dict>
		<key>pattern_function_definition</key>
		<dict>
			<key>name</key>
			<string>meta.definition.function.curry</string>
			<key>begin</key>
			<string>^\s*(?=\(.*\)|\[.*\]|([A-Z][\w&apos;]*(\s+([\w\s,&apos;]*|\(.*\)|\[.*\]|\{.*\}))*)\s*=)</string>
			<key>end</key>
			<string>(=)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!&apos;)\b([a-z_][\w&apos;]*)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression_stuff</string>
				</dict>
			</array>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.curry</string>
				</dict>
			</dict>
		</dict>
		<key>pragma</key>
		<dict>
			<key>name</key>
			<string>meta.preprocessor.curry pragma.curry</string>
			<key>begin</key>
			<string>(\{-#)\s+([A-Z_]+)\b</string>
			<key>end</key>
			<string>#-\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.other.preprocessor.curry pragma.support.language.curry</string>
					<key>match</key>
					<string>\b([A-Z][a-z]*)+\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.other.preprocessor.curry pragma.support.flag.curry</string>
					<key>match</key>
					<string>(-+[a-z]+)+</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.pragma.curry</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.preprocessor.curry pragma.name.curry</string>
				</dict>
			</dict>
		</dict>
		<key>quasi_quote</key>
		<dict>
			<key>name</key>
			<string>string.quoted.quasi.curry</string>
			<key>begin</key>
			<string>(\[)([a-z]\w*)?(\|)</string>
			<key>end</key>
			<string>(\|\])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.quasi-quoter.curry keyword.operator.curry</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.curry</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.quasi-quoter.curry keyword.operator.curry</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.quasi-quoter.curry keyword.operator.curry</string>
				</dict>
			</dict>
		</dict>
		<key>record_declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.record.curry</string>
			<key>begin</key>
			<string>(\{)(?!-)</string>
			<key>end</key>
			<string>(?&lt;!-)(\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#field_signature</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.curry punctuation.record.curry</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.curry punctuation.record.curry</string>
				</dict>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.operator.arrow.curry</string>
					<key>match</key>
					<string>-&gt;|→</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.big-arrow.curry</string>
					<key>match</key>
					<string>=&gt;|⇒</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.curry support.type.curry</string>
					<key>match</key>
					<string>\b(Int(eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(Error)?)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.generic.curry</string>
					<key>match</key>
					<string>(?&lt;!&apos;)\b[a-z][\w&apos;]*\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.curry</string>
					<key>match</key>
					<string>(?&lt;!&apos;)\b[A-Z][\w&apos;]*\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>punctuation.unit.curry</string>
					<key>match</key>
					<string>\(\)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.type_signature.brace.curry</string>
					<key>begin</key>
					<string>(\()</string>
					<key>end</key>
					<string>(\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.type_signature.list.curry</string>
					<key>begin</key>
					<string>(\[)</string>
					<key>end</key>
					<string>(\])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.curry</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>type_declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.type.curry</string>
			<key>begin</key>
			<string>^(\s*)(type)\s+([A-Z][\w&apos;]*)?</string>
			<key>end</key>
			<string>^(?!\1\s)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.curry</string>
					<key>match</key>
					<string>=</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.data.curry</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.other.curry entity.name.type.curry</string>
				</dict>
			</dict>
		</dict>
		<key>type_declarations</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#data_declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class_declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#instance_declaration</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>curry</string>
	</array>
</dict>
</plist>
