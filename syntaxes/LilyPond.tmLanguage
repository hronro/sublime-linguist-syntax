<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>LilyPond</string>
	<key>scopeName</key>
	<string>source.lilypond</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#expression</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#general_operators</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#note_name</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>chord_expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.chord-expression.lilypond</string>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#chord_mode_notation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#octave_transpose_operators</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.chord.modifier-indicator.lilypond</string>
							<key>match</key>
							<string>:</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.other.chord.modifier.lilypond</string>
							<key>match</key>
							<string>\b(?:aug|dim|m(?:aj)?|sus)</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.chord.alter-note.flat.lilypond</string>
							<key>match</key>
							<string>-</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.chord.alter-note.sharp.lilypond</string>
							<key>match</key>
							<string>\+</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.chord.remove-note.lilypond</string>
							<key>match</key>
							<string>\^</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.chord.add-bass-note.lilypond</string>
							<key>match</key>
							<string>/\+</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#chord_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>chord_mode_notation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.operator.forward-slash.lilypond</string>
					<key>match</key>
					<string>/(?!\+)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.duration-scale.lilypond</string>
					<key>begin</key>
					<string>\*</string>
					<key>end</key>
					<string>(\d+)(?:(/)(\d+))?</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.scale-duration.lilypond</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.integer.lilypond</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.forward-slash.lilypond</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.integer.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.tie.lilypond</string>
					<key>match</key>
					<string>~</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.variable.rest.lilypond</string>
					<key>match</key>
					<string>\b[rRs](?!-?[[:alpha:]])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.beam.begin.lilypond</string>
					<key>match</key>
					<string>\[</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.beam.end.lilypond</string>
					<key>match</key>
					<string>\]</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.bar-check.lilypond</string>
					<key>match</key>
					<string>\|</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.dynamic-mark.begin.crescendo.lilypond</string>
					<key>match</key>
					<string>\\&lt;</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.dynamic-mark.begin.decrescendo.lilypond</string>
					<key>match</key>
					<string>\\&gt;</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.dynamic-mark.end.lilypond</string>
					<key>match</key>
					<string>\\!</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.slur.begin.lilypond</string>
					<key>match</key>
					<string>\(</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.slur.end.lilypond</string>
					<key>match</key>
					<string>\)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.phrasing-slur.begin.lilypond</string>
					<key>match</key>
					<string>\\\(</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.phrasing-slur.end.lilypond</string>
					<key>match</key>
					<string>\\\)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.slur-label.lilypond</string>
					<key>begin</key>
					<string>\\=</string>
					<key>end</key>
					<string>(?=\\?[()])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>name</key>
							<string>entity.name.slur-label.lilypond</string>
							<key>match</key>
							<string>[-\w]+</string>
						</dict>
						<dict>
							<key>name</key>
							<string>string.lilypond</string>
							<key>contentName</key>
							<string>entity.name.slur-label.lilypond</string>
							<key>begin</key>
							<string>&quot;</string>
							<key>end</key>
							<string>&quot;</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>name</key>
									<string>constant.character.escape.lilypond</string>
									<key>match</key>
									<string>\\[nt&quot;&apos;\\]</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.lilypond</string>
								</dict>
							</dict>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.lilypond</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.punctuation.slur-label.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.chord.lilypond</string>
					<key>begin</key>
					<string>&lt;(?!&lt;)</string>
					<key>end</key>
					<string>(?&lt;![-&gt;])&gt;</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.lilypond</string>
							<key>match</key>
							<string>&lt;</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#music_expression_contents</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.chord.begin.lilypond</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.chord.end.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.chord-repetition.lilypond</string>
					<key>match</key>
					<string>(?&lt;![[:alpha:]])q(?!-?[[:alpha:]])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.deprecated.ligature.begin.lilypond</string>
					<key>match</key>
					<string>\\\[</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.deprecated.ligature.end.lilypond</string>
					<key>match</key>
					<string>\\\]</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.articulation-direction-indicator.down.lilypond</string>
					<key>match</key>
					<string>_</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.string-number-indicator.lilypond</string>
					<key>match</key>
					<string>\\(?=\d)</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>comment.block.lilypond</string>
					<key>begin</key>
					<string>%{</string>
					<key>end</key>
					<string>%}</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.lilypond</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.line.lilypond</string>
					<key>begin</key>
					<string>%</string>
					<key>end</key>
					<string>$</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.lilypond</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>drum_expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.drum-expression.lilypond</string>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>support.variable.percussion-note.lilypond</string>
							<key>match</key>
							<string>\b(a(?:coustic(?:bassdrum|snare)|g(?:[hl]))|b(?:assdrum|d(?:(?:a)?)|o(?:h(?:[mo])|l(?:[mo])|[hl]))|c(?:ab(?:(?:asa)?)|g(?:h(?:[mo])|l(?:[mo])|[hl])|hinesecymbal|l(?:aves|osedhihat)|owbell|rashcymbal(?:(?:[ab])?)|ui(?:[mo])|ym(?:c(?:[abh])|r(?:[ab])|[crs])|[bl])|d(?:[abcde])|electricsnare|f(?:ive(?:down|up)|our(?:down|up))|gui(?:(?:ro|[ls])?)|h(?:a(?:lfopenhihat|ndclap)|h(?:ho|[cop])|i(?:agogo|bongo|conga|gh(?:(?:(?:floor)?)tom)|hat|midtom|sidestick|timbale|woodblock)|[ch])|lo(?:agogo|bongo|conga|ng(?:guiro|whistle)|sidestick|timbale|w(?:floortom|midtom|oodblock|tom))|m(?:ar(?:(?:acas)?)|ute(?:cuica|hi(?:bongo|conga)|lo(?:bongo|conga)|triangle))|o(?:ne(?:down|up)|pen(?:cuica|hi(?:bongo|conga|hat)|lo(?:bongo|conga)|triangle))|pedalhihat|r(?:b|ide(?:bell|cymbal(?:(?:[ab])?)))|s(?:hort(?:guiro|whistle)|idestick|n(?:are|[ae])|plashcymbal|s(?:[hl])|[ns])|t(?:amb(?:(?:ourine)?)|hree(?:down|up)|im(?:[hl])|om(?:f(?:[hl])|m(?:[hl])|[hl])|ri(?:(?:angle|[mo])?)|t|wo(?:down|up))|u(?:[abcde])|vib(?:raslap|s)|w(?:b(?:[hl])|h(?:[ls])))(?!-?[[:alpha:]])</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#music_notation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#percussion_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#general_operators</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#integer</string>
				</dict>
				<dict>
					<key>name</key>
					<string>string.lilypond</string>
					<key>begin</key>
					<string>&quot;</string>
					<key>end</key>
					<string>&quot;</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>constant.character.escape.lilypond</string>
							<key>match</key>
							<string>\\[nt&quot;&apos;\\]</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.lilypond</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.simultaneous-expressions.lilypond</string>
					<key>begin</key>
					<string>&lt;&lt;</string>
					<key>end</key>
					<string>&gt;&gt;</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#music_expression_contents</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.simultaneous-expressions.begin.lilypond</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.simultaneous-expressions.end.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.separator.simultaneous-expressions.lilypond</string>
					<key>match</key>
					<string>\\\\</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.$1.lilypond</string>
					<key>begin</key>
					<string>\\(fixed|relative)(?!-?[[:alpha:]])</string>
					<key>end</key>
					<string>(?&lt;=[^%]})|(?&lt;=^})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#octave_transpose_operators</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>support.function.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.note-mode.lilypond</string>
					<key>begin</key>
					<string>\\notemode(?!-?[[:alpha:]])</string>
					<key>end</key>
					<string>(?&lt;=[^%]})|(?&lt;=^})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#music_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.markup-block.lilypond</string>
					<key>begin</key>
					<string>\\markup(?:list)?(?!-?[[:alpha:]])</string>
					<key>end</key>
					<string>(?&lt;!\\)([-\w]+)|(?&lt;=[^%]})|(?&lt;=^})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#markup_command</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#markup_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.lilypond</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.markup-expression.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.lyric-mode.lilypond</string>
					<key>begin</key>
					<string>\\(?:addlyrics|lyric(?:mode|s(?:to)?))(?!-?[[:alpha:]])</string>
					<key>end</key>
					<string>(?&lt;=[^%]})|(?&lt;=^})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#lyric_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.drum-mode.lilypond</string>
					<key>begin</key>
					<string>\\drum(?:mode|s)(?!-?[[:alpha:]])</string>
					<key>end</key>
					<string>(?&lt;=[^%]})|(?&lt;=^})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#drum_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.chord-mode.lilypond</string>
					<key>begin</key>
					<string>\\chordmode(?!-?[[:alpha:]])</string>
					<key>end</key>
					<string>(?&lt;=[^%]})|(?&lt;=^})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#chord_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.figure-mode.lilypond</string>
					<key>begin</key>
					<string>\\figure(?:mode|s)(?!-?[[:alpha:]])</string>
					<key>end</key>
					<string>(?&lt;=[^%]})|(?&lt;=^})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#figure_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.paper-block.lilypond</string>
					<key>begin</key>
					<string>\\paper(?!-?[[:alpha:]])</string>
					<key>end</key>
					<string>(?&lt;=[^%]})|(?&lt;=^})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#paper_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.other.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.other.lilypond</string>
					<key>match</key>
					<string>\\(a(?:ccepts|ddlyrics|l(?:ias|ternative))|book(?:(?:part)?)|c(?:h(?:ange|ord(?:mode|s))|on(?:sists|text))|d(?:e(?:fault(?:(?:child)?)|nies|scription)|rum(?:mode|s))|etc|figure(?:mode|s)|header|include|l(?:ayout|yric(?:mode|s(?:(?:to)?)))|m(?:a(?:ininput|rkup(?:(?:list)?))|idi)|n(?:ame|ew|otemode)|override|paper|re(?:move|(?:pea|s|ver)t)|s(?:core|e(?:quential|t)|imultaneous)|t(?:empo|ype)|unset|version|with)(?!-?[[:alpha:]])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.lilypond</string>
					<key>match</key>
					<string>\\(Remove(?:(?:(?:All)?)EmptyStaves)|a(?:bsolute|cc(?:ent|i(?:accatura|dentalStyle))|dd(?:ChordShape|InstrumentDefinition|Quote)|eolian|fterGrace(?:(?:Fraction)?)|iken(?:Heads(?:(?:Minor)?)|ThinHeads(?:(?:Minor)?))|l(?:low(?:PageTurn|VoltaHook)|terBroken)|mbitusAfter|pp(?:endToTag|ly(?:Context|Music|Output)|oggiatura)|r(?:abicStringNumbers|peggio(?:(?:Arrow(?:Down|Up)|Bracket|Normal|Parenthesis(?:(?:Dashed)?))?))|ssertBeam(?:Quant|Slope)|uto(?:B(?:eamO(?:ff|n)|reaksO(?:ff|n))|Change|LineBreaksO(?:ff|n)|PageBreaksO(?:ff|n)))|b(?:a(?:lloon(?:GrobText|LengthO(?:ff|n)|Text)|r(?:(?:NumberCheck)?)|ssFigure(?:ExtendersO(?:ff|n)|StaffAlignment(?:Down|Neutral|Up)))|e(?:amExceptions|ndAfter)|igger|lackTriangleMarkup|ookOutput(?:Name|Suffix)|re(?:a(?:k(?:(?:DynamicSpan)?)|the)|ve))|c(?:adenzaO(?:ff|n)|enter|hord(?:(?:Repeat|modifier)s)|lef|o(?:da|mp(?:oundMeter|ress(?:(?:EmptyMeasure|MMRest)s)))|r(?:(?:esc(?:(?:Hairpin|TextCresc)?)|ossStaff)?)|ue(?:Clef(?:(?:Unset)?)|During(?:(?:WithClef)?)))|d(?:ash(?:Bang|D(?:ash|ot)|Hat|Larger|Plus|Underscore)|e(?:adNote(?:(?:sO(?:ff|n))?)|cr(?:(?:esc)?)|f(?:ault(?:NoteHeads|StringTunings|TimeSignature)|ineBarLine)|precated(?:cresc|dim|end(?:cresc|dim)))|i(?:m(?:(?:Hairpin|TextD(?:ecr(?:(?:esc)?)|im))?)|splay(?:LilyMusic|Music|Scheme))|o(?:rian|ts(?:Down|Neutral|Up)|wn(?:(?:bow|mordent|prall)?))|r(?:opNote|umPitchNames)|ynamic(?:Down|Neutral|Up))|e(?:asyHeadsO(?:ff|n)|nd(?:Spanners|cr(?:(?:esc)?)|d(?:ecr(?:(?:esc)?)|im))|pisem(?:Finis|Initium)|spressivo|(?:ventChord|xpandEmptyMeasure)s)|f(?:e(?:atherDurations|rmata)|ff(?:(?:f(?:(?:f)?))?)|i(?:nger|xed)|lageolet|ootnote|renchChords|unkHeads(?:(?:Minor)?)|[fpz])|g(?:ermanChords|lissando|r(?:ace|obdescriptions))|h(?:a(?:lfopen|rmonic(?:(?:By(?:Fret|Ratio)|Note|sO(?:ff|n))?)|ydnturn)|enze(?:(?:long|short)fermata)|ide(?:(?:Notes|S(?:plitTiedTabNotes|taffSwitch))?)|uge)|i(?:gnatzekException(?:Music|s)|mprovisationO(?:ff|n)|n(?:StaffSegno|cipit|strumentSwitch|ver(?:sion|tChords))|onian|talianChords)|k(?:e(?:epWithTag|y)|i(?:evanO(?:ff|n)|llCues))|l(?:a(?:bel|issezVibrer|(?:nguag(?:(?:e(?:Restor|SaveAndChang))?)|rg)e)|eft|heel|ineprall|o(?:crian|ng(?:(?:(?:fermat)?)a))|toe|ydian)|m(?:a(?:gnify(?:Music|Staff)|jor|ke(?:Clusters|DefaultStringTuning)|r(?:cato|k(?:(?:LengthO(?:ff|n)|upMap)?))|xima)|e(?:lisma(?:(?:End)?)|rgeDifferently(?:DottedO(?:ff|n)|HeadedO(?:ff|n)))|i(?:diDrumPitches|nor|xolydian)|o(?:dal(?:Inversion|Transpose)|rdent)|usicMap|[fp])|n(?:ewSpacingSection|o(?:B(?:eam|reak)|Page(?:Break|Turn)|rmalsize)|umericTimeSignature)|o(?:ctaveCheck|ffset|mit|n(?:(?:(?:eVoi)?)ce)|pen|ttava|verride(?:Property|TimeSignatureSettings))|p(?:a(?:ge(?:Break|Turn)|lmMute(?:(?:O(?:ff|n))?)|r(?:allelMusic|enthesize|t(?:Combine(?:(?:A(?:part|utomatic)|Chords|Down|Force|Listener|SoloI(?:(?:I)?)|U(?:nisono|p))?)|ial)))|hr(?:asingSlur(?:D(?:ash(?:Pattern|ed)|o(?:tted|wn))|Half(?:(?:Dashe|Soli)d)|Neutral|Solid|Up)|ygian)|itchedTrill|o(?:intAndClick(?:O(?:ff|n)|Types)|rtato)|p(?:(?:p(?:(?:p(?:(?:p)?))?))?)|r(?:all(?:(?:down|mordent|prall|up)?)|edefinedFretboardsO(?:ff|n)|operty(?:Override|Revert|Set|Tweak|Unset))|ushToTag)|quoteDuring|r(?:aiseNote|e(?:duceChords|lative|moveWithTag|peatTie|setRelativeOctave|trograde|ver(?:seturn|tTimeSignatureSettings))|fz|heel|ight(?:(?:HandFinger)?)|omanStringNumbers|toe)|s(?:acredHarpHeads(?:(?:Minor)?)|caleDurations|e(?:gno|miGermanChords|t(?:DefaultDurationToQuarter|tingsFrom))|f(?:[fpz])|h(?:ape|ift(?:Durations|O(?:ff|n(?:(?:n(?:(?:n)?))?)))|o(?:rtfermata|wS(?:plitTiedTabNotes|taffSwitch)))|i(?:(?:gnumcongruentia|ngl)e)|kip|l(?:ash(?:edGrace|turn)|ur(?:D(?:ash(?:Pattern|ed)|o(?:tted|wn))|Half(?:(?:Dashe|Soli)d)|Neutral|Solid|Up))|mall(?:(?:er)?)|nappizzicato|o(?:stenutoO(?:ff|n)|uthernHarmonyHeads(?:(?:Minor)?))|p(?:acingTweaks|p)|t(?:a(?:ccat(?:(?:(?:issim)?)o)|rt(?:(?:A(?:(?:cciacc|ppoggi)aturaMusic)|Gr(?:ace(?:Music|Slur)|oup)|Measure(?:Count|Spanner)|S(?:lashedGraceMusic|taff)|T(?:(?:ext|rill)Span))?))|em(?:Down|Neutral|Up)|o(?:p(?:(?:A(?:(?:cciacc|ppoggi)aturaMusic)|Gr(?:ace(?:Music|Slur)|oup)|Measure(?:Count|Spanner)|S(?:lashedGraceMusic|taff)|T(?:(?:ext|rill)Span)|ped)?)|rePredefinedDiagram)|ringTuning|yledNoteHeads)|ustainO(?:ff|n)|[fp])|t(?:a(?:b(?:ChordRepe(?:ats|tition)|FullNotation)|g(?:(?:Group)?))|e(?:eny|mporary|nuto|xt(?:LengthO(?:ff|n)|Spanner(?:Down|Neutral|Up)))|humb|i(?:e(?:D(?:ash(?:Pattern|ed)|o(?:tted|wn))|Half(?:(?:Dashe|Soli)d)|Neutral|Solid|Up)|me(?:(?:s)?)|ny)|ocItem(?:(?:WithDotsMarkup)?)|r(?:anspos(?:e(?:(?:dCueDuring)?)|ition)|eCorde|ill)|u(?:plet(?:(?:Down|Neutral|Span|Up)?)|rn)|weak)|u(?:n(?:HideNotes|aCorda|do|foldRepeats)|p(?:(?:bow|mordent|prall)?))|v(?:arcoda|ery(?:(?:long|short)fermata)|o(?:i(?:ce(?:Four(?:(?:Style)?)|NeutralStyle|One(?:(?:Style)?)|T(?:hree(?:(?:Style)?)|wo(?:(?:Style)?))|s)|d)|welTransition))|w(?:alkerHeads(?:(?:Minor)?)|hite(?:(?:Circ|Triang)leMarkup)|ithMusicProperty)|xNote(?:(?:sO(?:ff|n))?)|[fnp])(?!-?[[:alpha:]])</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#music_expression</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.scheme.lilypond</string>
					<key>begin</key>
					<string>(#)|(\$)|([#$]@)</string>
					<key>end</key>
					<string>(?=\s)|$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#scheme_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.lisp</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.scheme.embed.lilypond</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.scheme.evaluate.lilypond</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.scheme.list-splice.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.lilypond</string>
					<key>match</key>
					<string>\\[[:alpha:]]+(?:-[[:alpha:]]+)*</string>
				</dict>
			</array>
		</dict>
		<key>figure_expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.figure-expression.lilypond</string>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>meta.figure-group.lilypond</string>
							<key>begin</key>
							<string>&lt;</string>
							<key>end</key>
							<string>&gt;</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#figure_expression_contents</string>
								</dict>
								<dict>
									<key>name</key>
									<string>meta.figure-bracket.lilypond</string>
									<key>begin</key>
									<string>\[</string>
									<key>end</key>
									<string>\]</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>name</key>
											<string>invalid.illegal.lilypond</string>
											<key>match</key>
											<string>[&gt;\[]</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#figure_expression_contents</string>
										</dict>
									</array>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.figure-bracket.begin.lilypond</string>
										</dict>
									</dict>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.figure-bracket.end.lilypond</string>
										</dict>
									</dict>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.figure-group.begin.lilypond</string>
								</dict>
							</dict>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.figure-group.end.lilypond</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#figure_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>figure_expression_contents</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>invalid.illegal.lilypond</string>
					<key>match</key>
					<string>&lt;</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#integer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.figure.accidental.sharp.lilypond</string>
					<key>match</key>
					<string>\+</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.figure.accidental.flat.lilypond</string>
					<key>match</key>
					<string>-</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.figure.accidental.natural.lilypond</string>
					<key>match</key>
					<string>!</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.variable.figure.hidden-third.lilypond</string>
					<key>match</key>
					<string>_</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.figure.augmented.lilypond</string>
					<key>match</key>
					<string>\\\+</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.figure.diminished.lilypond</string>
					<key>match</key>
					<string>/</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.figure.raised-sixth.lilypond</string>
					<key>match</key>
					<string>\\\\</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.figure.end-continuation-line.lilypond</string>
					<key>match</key>
					<string>\\!</string>
				</dict>
			</array>
		</dict>
		<key>general_operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.operator.dot.lilypond</string>
					<key>match</key>
					<string>\.</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.equals-sign.lilypond</string>
					<key>match</key>
					<string>=</string>
				</dict>
			</array>
		</dict>
		<key>integer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.numeric.integer.lilypond</string>
					<key>match</key>
					<string>\d+</string>
				</dict>
			</array>
		</dict>
		<key>lyric_expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.lyric-expression.lilypond</string>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>keyword.operator.lyric.syllable-hyphen.lilypond</string>
							<key>match</key>
							<string>(?&lt;=[\d\s])--(?=\s)</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.lyric.syllable-space.lilypond</string>
							<key>match</key>
							<string>(?&lt;=\S)_(?=\S)</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.lyric.tie.lilypond</string>
							<key>match</key>
							<string>(?&lt;=\S)~(?=\S)</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.lyric.extender-line.lilypond</string>
							<key>match</key>
							<string>(?&lt;=[\d\s])__(?=\s)</string>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.operator.lyric.melisma.lilypond</string>
							<key>match</key>
							<string>(?&lt;=[\d\s])_(?=\s)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#lyric_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>markup_command</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.function.lilypond</string>
					<key>match</key>
					<string>\\(a(?:bs-fontsize|rrow-head|uto-footnote)|b(?:ackslashed-digit|eam|o(?:ld|x)|racket)|c(?:aps|enter-(?:(?:alig|colum)n)|har|ircle|o(?:lumn(?:(?:-lines)?)|m(?:(?:bin|mand-nam)e)|ncat))|d(?:ir-column|ouble(?:flat|sharp)|raw-(?:(?:circl|(?:(?:d(?:(?:ash|ott)ed-)|h|squiggle-)?)lin)e)|ynamic)|e(?:llipse|psfile|yeglasses)|f(?:ermata|i(?:ll(?:-(?:line|with-pattern)|ed-box)|nger|rst-visible)|lat|o(?:nt(?:Caps|size)|otnote)|r(?:action|et-diagram(?:(?:-(?:(?:ter|verbo)se))?)|omproperty))|general-align|h(?:a(?:lign|rp-pedal)|bracket|center-in|(?:spac|ug)e)|italic|justif(?:ied-lines|y(?:(?:-(?:field|line|string))?))|l(?:arge(?:(?:r)?)|eft-(?:align|brace|column)|ine|o(?:okup|wer))|m(?:a(?:gnify|p-markup-commands|rk(?:alphabet|letter))|edium|usicglyph)|n(?:atural|o(?:rmal(?:-(?:size-su(?:b|per)|text)|size)|te(?:(?:-by-number)?))|u(?:ll|mber))|o(?:n-the-fly|v(?:al|er(?:lay|ride(?:(?:-lines)?)|tie)))|p(?:a(?:d-(?:around|markup|(?:(?:to-bo)?)x)|ge-(?:link|ref)|renthesize|t(?:h|tern))|ostscript|roperty-recursive|ut-adjacent)|r(?:aise|e(?:place|st(?:(?:-by-number)?))|ight-(?:align|brace|column)|o(?:man|tate|unded-box))|s(?:ans|c(?:ale|ore(?:(?:-lines)?))|e(?:mi(?:flat|sharp)|squi(?:flat|sharp))|harp|imple|lashed-digit|mall(?:(?:Caps|er)?)|t(?:encil|rut)|u(?:b|per))|t(?:able(?:(?:-of-contents)?)|e(?:eny|xt)|i(?:e(?:(?:d-lyric)?)|ny)|r(?:ans(?:late(?:(?:-scaled)?)|parent)|iangle)|ypewriter)|u(?:nder(?:(?:lin|ti)e)|pright)|v(?:center|(?:erbatim-fil|spac)e)|w(?:hiteout|ith-(?:color|dimensions(?:(?:-from)?)|link|outline|url)|ordwrap(?:(?:-(?:field|internal|lines|string(?:(?:-internal)?)))?)))(?!-?[[:alpha:]])</string>
				</dict>
			</array>
		</dict>
		<key>markup_expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.markup-expression.lilypond</string>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#markup_command</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#markup_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>music_expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.music-expression.lilypond</string>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#music_expression_contents</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>music_expression_contents</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#music_notation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#octave_transpose_operators</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.accidental.reminder.lilypond</string>
					<key>match</key>
					<string>!</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.accidental.cautionary.lilypond</string>
					<key>match</key>
					<string>\?</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>music_notation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\^)|(_)|(-)</string>
					<key>end</key>
					<string>(\^)|(\+)|(-)|(!)|(&gt;)|(\.)|(_)|(?=[^\s%])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation-direction-indicator.up.lilypond</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation-direction-indicator.down.lilypond</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation-direction-indicator.default.lilypond</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation.marcato.lilypond</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation.stopped.lilypond</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation.tenuto.lilypond</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation.staccatissimo.lilypond</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation.accent.lilypond</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation.staccato.lilypond</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.articulation.portato.lilypond</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#chord_mode_notation</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.articulation-direction-indicator.up.lilypond</string>
					<key>match</key>
					<string>\^</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.articulation-direction-indicator.default.lilypond</string>
					<key>match</key>
					<string>(?&lt;![[:alpha:]])-|-(?![[:alpha:]])</string>
				</dict>
			</array>
		</dict>
		<key>note_name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.variable.note-name.lilypond</string>
					<key>match</key>
					<string>\b(a(?:-(?:flat(?:(?:flat)?)|natural|sharp(?:(?:sharp)?))|e(?:s(?:e(?:[hs])|s(?:(?:e(?:h|ss))?))|[hs])|ff|i(?:s(?:i(?:[hs])|s(?:(?:i(?:h|ss))?))|[hs])|q(?:[fs])|s(?:a(?:[hs])|e(?:[hs])|s(?:(?:e(?:h|ss))?))|tq(?:[fs])|[fhsx])|b(?:-(?:flat(?:(?:flat)?)|natural|sharp(?:(?:sharp)?))|e(?:s(?:e(?:[hs])|s)|[hs])|ff|i(?:si(?:[hs])|[hs])|q(?:[fs])|ss|tq(?:[fs])|[bfsx])|c(?:-(?:flat(?:(?:flat)?)|natural|sharp(?:(?:sharp)?))|e(?:s(?:e(?:[hs])|s(?:(?:e(?:h|ss))?))|[hs])|ff|i(?:s(?:i(?:[hs])|s(?:(?:i(?:h|ss))?))|[hs])|q(?:[fs])|ss|tq(?:[fs])|[fsx])|d(?:-(?:flat(?:(?:flat)?)|natural|sharp(?:(?:sharp)?))|e(?:s(?:e(?:[hs])|s(?:(?:e(?:h|ss))?))|[hs])|ff|i(?:s(?:i(?:[hs])|s(?:(?:i(?:h|ss))?))|[hs])|o(?:b(?:b|hb|qt|sb|tqt)|c(?:[bs])|d(?:(?:(?:s)?)d)|h(?:[bk])|k(?:(?:(?:h)?)k)|q(?:[bds])|s(?:(?:(?:t)?)qt|[bds])|t(?:c(?:[bs])|q(?:[bds]))|[bdksx])|q(?:[fs])|ss|tq(?:[fs])|[fosx])|e(?:-(?:flat(?:(?:flat)?)|natural|sharp(?:(?:sharp)?))|e(?:s(?:e(?:[hs])|s(?:(?:e(?:h|ss))?))|[hs])|ff|i(?:s(?:i(?:[hs])|s(?:(?:i(?:h|ss))?))|[hs])|q(?:[fs])|s(?:e(?:[hs])|s(?:(?:e(?:h|ss))?))|tq(?:[fs])|[fhsx])|f(?:-(?:flat(?:(?:flat)?)|natural|sharp(?:(?:sharp)?))|a(?:b(?:b|hb|qt|sb|tqt)|c(?:[bs])|d(?:(?:(?:s)?)d)|h(?:[bk])|k(?:(?:(?:h)?)k)|q(?:[bds])|s(?:(?:(?:t)?)qt|[bds])|t(?:c(?:[bs])|q(?:[bds]))|[bdksx])|e(?:s(?:e(?:[hs])|s(?:(?:e(?:h|ss))?))|[hs])|ff|i(?:s(?:i(?:[hs])|s(?:(?:i(?:h|ss))?))|[hs])|q(?:[fs])|ss|tq(?:[fs])|[afsx])|g(?:-(?:flat(?:(?:flat)?)|natural|sharp(?:(?:sharp)?))|e(?:s(?:e(?:[hs])|s(?:(?:e(?:h|ss))?))|[hs])|ff|i(?:s(?:i(?:[hs])|s(?:(?:i(?:h|ss))?))|[hs])|q(?:[fs])|ss|tq(?:[fs])|[fsx])|h(?:e(?:h|s(?:e(?:[hs])|se(?:h|ss)))|i(?:s(?:i(?:[hs])|s(?:(?:i(?:h|ss))?))|[hs]))|la(?:(?:b(?:b|hb|qt|sb|tqt)|c(?:[bs])|d(?:(?:(?:s)?)d)|h(?:[bk])|k(?:(?:(?:h)?)k)|q(?:[bds])|s(?:(?:(?:t)?)qt|[bds])|t(?:c(?:[bs])|q(?:[bds]))|[bdksx])?)|mi(?:(?:b(?:b|hb|qt|sb|tqt)|c(?:[bs])|d(?:(?:(?:s)?)d)|h(?:[bk])|k(?:(?:(?:h)?)k)|q(?:[bds])|s(?:(?:(?:t)?)qt|[bds])|t(?:c(?:[bs])|q(?:[bds]))|[bdksx])?)|r(?:e(?:b(?:b|hb|qt|sb|tqt)|c(?:[bs])|d(?:(?:(?:s)?)d)|h(?:[bk])|k(?:(?:(?:h)?)k)|q(?:[bds])|s(?:(?:(?:t)?)qt|[bds])|t(?:c(?:[bs])|q(?:[bds]))|[bdksx])|é(?:b(?:(?:(?:s)?)b)|d(?:(?:(?:s)?)d)|s(?:[bd])|[bdx])|[eé])|s(?:i(?:(?:b(?:b|hb|qt|sb|tqt)|c(?:[bs])|d(?:(?:(?:s)?)d)|h(?:[bk])|k(?:(?:(?:h)?)k)|q(?:[bds])|s(?:(?:(?:t)?)qt|[bds])|t(?:c(?:[bs])|q(?:[bds]))|[bdksx])?)|ol(?:(?:b(?:b|hb|qt|sb|tqt)|c(?:[bs])|d(?:(?:(?:s)?)d)|h(?:[bk])|k(?:(?:(?:h)?)k)|q(?:[bds])|s(?:(?:(?:t)?)qt|[bds])|t(?:c(?:[bs])|q(?:[bds]))|[bdksx])?))|[abcdefgh])(?!-?[[:alpha:]])</string>
				</dict>
			</array>
		</dict>
		<key>octave_transpose_operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.operator.transpose-octave.up.lilypond</string>
					<key>match</key>
					<string>&apos;</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.transpose-octave.down.lilypond</string>
					<key>match</key>
					<string>,</string>
				</dict>
			</array>
		</dict>
		<key>paper_expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.paper-expression.lilypond</string>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>support.constant.lilypond</string>
							<key>match</key>
							<string>\\(?:[cm]m|in|pt)(?!-?[[:alpha:]])</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#paper_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>scheme_expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.scheme-expression.lilypond</string>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>#\{</string>
							<key>end</key>
							<string>#}</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>source.lilypond</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#scheme_expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.lisp</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>ly</string>
		<string>ily</string>
	</array>
</dict>
</plist>
