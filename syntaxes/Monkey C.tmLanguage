<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>Monkey C</string>
	<key>scopeName</key>
	<string>source.mc</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#statements</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access-modifier</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>storage.modifier.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(hidden|static)\b(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>after-operator-block</key>
		<dict>
			<key>name</key>
			<string>meta.objectliteral.mc</string>
			<key>begin</key>
			<string>(?&lt;=[=(,\[?+!]|return|throw|in|of|typeof|&amp;&amp;|\|\||\*)\s*(\{)</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
		</dict>
		<key>array-literal</key>
		<dict>
			<key>name</key>
			<string>meta.array.literal.mc</string>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.mc</string>
				</dict>
			</dict>
		</dict>
		<key>boolean-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.language.boolean.true.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\btrue\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.language.boolean.false.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bfalse\b(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>case-clause</key>
		<dict>
			<key>name</key>
			<string>case-clause.expr.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(case|default(?=:))\b(?!\$)</string>
			<key>end</key>
			<string>:</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.section.case-statement.mc</string>
				</dict>
			</dict>
		</dict>
		<key>class-body</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#enum-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#access-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#after-operator-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-semicolon</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
		</dict>
		<key>class-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.class.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(?:(class))\b</string>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-heritage</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
		</dict>
		<key>class-heritage</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(extends)\b)(?!\$)</string>
			<key>end</key>
			<string>(?=\{)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-heritage</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)(?=\s*[_$[:alpha:]][_$[:alnum:]]*(\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)*\s*([,&lt;{]|extends|//|/\*))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)(?=\s*([,&lt;{]|extends|//|/\*))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>comment.block.documentation.mc</string>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>end</key>
					<string>\*/</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.mc</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.mc</string>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.mc</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>end</key>
					<string>(?=$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>comment.line.double-slash.mc</string>
							<key>begin</key>
							<string>//</string>
							<key>end</key>
							<string>(?=$)</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.mc</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.mc</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>control-statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.control.trycatch.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(catch|finally|throw|try)\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.loop.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(break|continue|do|while)\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.flow.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(return)\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(case|default|switch)\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.conditional.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(else|if)\b(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>decl-block</key>
		<dict>
			<key>name</key>
			<string>meta.block.mc</string>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
		</dict>
		<key>declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.mc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#enum-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#namespace-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-declaration</string>
				</dict>
			</array>
		</dict>
		<key>decorator</key>
		<dict>
			<key>name</key>
			<string>meta.decorator.mc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)(\(:([_$[:alpha:]][_$[:alnum:]]*)\))</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.decorator.mc</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>enum-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.enum.declaration.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(enum)\b</string>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
							<key>end</key>
							<string>(?=,|\}|$)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#variable-initializer</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>variable.other.enummember.mc</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=((\&apos;[^&apos;]*\&apos;)|(\&quot;[^&quot;]*\&quot;)|(\[([^\[\]]|\[[^\[\]]*\])+\])))</string>
							<key>end</key>
							<string>(?=,|\}|$)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#string</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#array-literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#variable-initializer</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#punctuation-comma</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.mc</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.mc</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.enum.mc</string>
				</dict>
			</dict>
		</dict>
		<key>expression</key>
		<dict>
			<key>name</key>
			<string>meta.expression.mc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ternary-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#new-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-objects</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#identifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-accessor</string>
				</dict>
			</array>
		</dict>
		<key>expression-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.operator.expression.instanceof.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\binstanceof\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.expression.has.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bhas\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bnew\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.expression.void.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bvoid\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.compound.mc</string>
					<key>match</key>
					<string>\*=|(?&lt;!\()/=|%=|\+=|\-=</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.compound.bitwise.mc</string>
					<key>match</key>
					<string>\&amp;=|\^=|&lt;&lt;=|&gt;&gt;=|\|=</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.bitwise.shift.mc</string>
					<key>match</key>
					<string>&lt;&lt;|&gt;&gt;</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.comparison.mc</string>
					<key>match</key>
					<string>==|!=</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.relational.mc</string>
					<key>match</key>
					<string>&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.logical.mc</string>
					<key>match</key>
					<string>\!|&amp;&amp;|\|\|</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.expression.logical.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\band|or|not\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.bitwise.mc</string>
					<key>match</key>
					<string>\&amp;|~|\^|\|</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.mc</string>
					<key>match</key>
					<string>\=</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.decrement.mc</string>
					<key>match</key>
					<string>--</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.increment.mc</string>
					<key>match</key>
					<string>\+\+</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.arithmetic.mc</string>
					<key>match</key>
					<string>%|\*|/|-|\+</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[_$[:alnum:])])\s*(/)(?![/*])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.mc</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>field-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.field.declaration.mc</string>
			<key>begin</key>
			<string>(?&lt;!\()(?:(?&lt;!\.|\$)\b(const|var)\s+)(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\&apos;[^&apos;]*\&apos;)|(\&quot;[^&quot;]*\&quot;)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=)?)</string>
			<key>end</key>
			<string>(?=\}|;|,|$)|(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.mc</string>
				</dict>
			</dict>
		</dict>
		<key>for-loop</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(for)\s*(\()</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-semicolon</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.loop.mc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.mc</string>
				</dict>
			</dict>
		</dict>
		<key>function-call</key>
		<dict>
			<key>begin</key>
			<string>(?=(\.\s*)?([_$[:alpha:]][_$[:alnum:]]*)\s*(&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\()</string>
			<key>end</key>
			<string>(?&lt;=\))(?!(\.\s*)?([_$[:alpha:]][_$[:alnum:]]*)\s*(&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\()</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#support-objects</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-accessor</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.function.mc</string>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.function.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(function\b)(?:(?:\s+|(?&lt;=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*</string>
			<key>end</key>
			<string>(?=$|;|\})|(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.mc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.mc</string>
				</dict>
			</dict>
		</dict>
		<key>function-parameters</key>
		<dict>
			<key>name</key>
			<string>meta.parameters.mc</string>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameter.mc</string>
					<key>match</key>
					<string>,</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.mc</string>
				</dict>
			</dict>
		</dict>
		<key>identifiers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.class.mc</string>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)(?=\s*\.\s*prototype\b(?!\$))</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)(\.)\s*(?:
  ([[:upper:]][_$[:digit:][:upper:]]*) |
  ([_$[:alpha:]][_$[:alnum:]]*)
)(?=\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.object.property.mc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.property.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)(?:(\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\s*=\s*(
  (function\s*[(&lt;])|(function\s+)|
  ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)|
  ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:) )) |
  ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
  ((&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;)))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(\.)\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.property.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(\.)\s*([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)(?:
  ([[:upper:]][_$[:digit:][:upper:]]*) |
  ([_$[:alpha:]][_$[:alnum:]]*)
)(?=\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.object.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.constant.mc</string>
					<key>match</key>
					<string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.readwrite.mc</string>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
				</dict>
			</array>
		</dict>
		<key>import-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.import.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(using)(?!(\s*:)|(\$))\b</string>
			<key>end</key>
			<string>(?=;|$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#import-export-declaration</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.mc</string>
				</dict>
			</dict>
		</dict>
		<key>import-export-clause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x) ([_$[:alpha:]][_$[:alnum:]]*) \s+ 
  (as) \s+ ([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.mc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.alias.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.language.import-export-all.mc</string>
					<key>match</key>
					<string>\*</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.default.mc</string>
					<key>match</key>
					<string>\b(default)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.readwrite.alias.mc</string>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
			</array>
		</dict>
		<key>import-export-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-export-clause</string>
				</dict>
			</array>
		</dict>
		<key>literal</key>
		<dict>
			<key>name</key>
			<string>literal.mc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#null-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numericConstant-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
			</array>
		</dict>
		<key>method-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.method.declaration.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(hidden)\s+)?(?:\b(function)\s+)(?:(?:\b(?:(initialize)|(initialize))\b(?!\$|:))|(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\&apos;[^&apos;]*\&apos;)|(\&quot;[^&quot;]*\&quot;)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))?\s*[\(\&lt;]))</string>
			<key>end</key>
			<string>(?=\}|;|,|$)|(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method-declaration-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.mc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.mc</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.mc</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.mc</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.mc</string>
				</dict>
			</dict>
		</dict>
		<key>method-declaration-name</key>
		<dict>
			<key>begin</key>
			<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\&apos;[^&apos;]*\&apos;)|(\&quot;[^&quot;]*\&quot;)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??)\s*[\(\&lt;])</string>
			<key>end</key>
			<string>(?=\(|\&lt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.function.mc</string>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
				</dict>
			</array>
		</dict>
		<key>namespace-declaration</key>
		<dict>
			<key>name</key>
			<string>meta.namespace.declaration.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(module)\s+(?=[_$[:alpha:]&quot;&apos;`])</string>
			<key>end</key>
			<string>(?=$|\{)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.module.mc</string>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-accessor</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.namespace.mc</string>
				</dict>
			</dict>
		</dict>
		<key>new-expr</key>
		<dict>
			<key>name</key>
			<string>new.expr.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(new)\b(?!\$)</string>
			<key>end</key>
			<string>(?&lt;=\))|(?=[;),}]|$|((?&lt;!\.|\$)\bnew\b(?!\$)))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.mc</string>
				</dict>
			</dict>
		</dict>
		<key>null-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.language.null.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bnull\b(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>numeric-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.numeric.hex.mc</string>
					<key>match</key>
					<string>\b(?&lt;!\$)0(x|X)[0-9a-fA-F]+\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.numeric.binary.mc</string>
					<key>match</key>
					<string>\b(?&lt;!\$)0(b|B)[01]+\b(?!\$)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.numeric.octal.mc</string>
					<key>match</key>
					<string>\b(?&lt;!\$)0(o|O)?[0-7]+\b(?!\$)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;!\$)(?:
  (?:\b[0-9]+(\.)[0-9]+[eE][+-]?[0-9]+[ld]?\b)| # 1.1E+3
  (?:\b[0-9]+(\.)[eE][+-]?[0-9]+[ld]?\b)|       # 1.E+3
  (?:\B(\.)[0-9]+[eE][+-]?[0-9]+[ld]?\b)|       # .1E+3
  (?:\b[0-9]+[eE][+-]?[0-9]+[ld]?\b)|            # 1E+3
  (?:\b[0-9]+(\.)[0-9]+[ld]?\b)|                # 1.1
  (?:\b[0-9]+(\.)[ld]?\B)|                      # 1.
  (?:\B(\.)[0-9]+[ld]?\b)|                      # .1
  (?:\b[0-9]+[ld]?\b(?!\.))                     # 1
)(?!\$)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.mc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.mc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.mc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.mc</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.mc</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.mc</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>numericConstant-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.language.nan.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bNaN\b(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>object-literal</key>
		<dict>
			<key>name</key>
			<string>meta.objectliteral.mc</string>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
		</dict>
		<key>object-member</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.object.member.mc</string>
					<key>begin</key>
					<string>(?:[:_$[:alpha:]][_$[:alnum:]]*)\s*(=&gt;)</string>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.object-literal.key.mc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>parameter-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\s*\b(hidden)(?=\s+(hidden)\s+)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)(?:\s*\b(hidden|static)\s+)?(\.\.\.)?\s*(?&lt;!=|:)([_$[:alpha:]][_$[:alnum:]]*)\s*(\??)(?=\s*
  (=\s*(
    (function\s*[(&lt;]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;) |
    ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
    ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
    ((&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;))
  ) |
  (:\s*(
    (&lt;) |
    ([(]\s*(
      ([)]) |
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )))
  )
)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.rest.mc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.mc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.optional.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\s*\b(hidden|static)\s+)?\s*(?&lt;!=|:)([_$[:alpha:]][_$[:alnum:]]*)\s*</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.rest.mc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.mc</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>paren-expression</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.mc</string>
				</dict>
			</dict>
		</dict>
		<key>punctuation-accessor</key>
		<dict>
			<key>name</key>
			<string>punctuation.accessor.mc</string>
			<key>match</key>
			<string>\.</string>
		</dict>
		<key>punctuation-comma</key>
		<dict>
			<key>name</key>
			<string>punctuation.separator.comma.mc</string>
			<key>match</key>
			<string>,</string>
		</dict>
		<key>punctuation-semicolon</key>
		<dict>
			<key>name</key>
			<string>punctuation.terminator.statement.mc</string>
			<key>match</key>
			<string>;</string>
		</dict>
		<key>qstring-double</key>
		<dict>
			<key>name</key>
			<string>string.quoted.double.mc</string>
			<key>begin</key>
			<string>&quot;</string>
			<key>end</key>
			<string>(&quot;)|((?:[^\\\n])$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.mc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.mc</string>
				</dict>
			</dict>
		</dict>
		<key>qstring-single</key>
		<dict>
			<key>name</key>
			<string>string.quoted.single.mc</string>
			<key>begin</key>
			<string>&apos;</string>
			<key>end</key>
			<string>(\&apos;)|((?:[^\\\n])$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.mc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.mc</string>
				</dict>
			</dict>
		</dict>
		<key>statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#for-loop</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#after-operator-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-semicolon</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qstring-single</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#qstring-double</string>
				</dict>
			</array>
		</dict>
		<key>string-character-escape</key>
		<dict>
			<key>name</key>
			<string>constant.character.escape.mc</string>
			<key>match</key>
			<string>\\(x[[:xdigit:]]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>
		</dict>
		<key>support-objects</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)(?&lt;!\.|\$)\b(Math)(?:\s*(\.)\s*(?:
  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|
  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|
  round|sign|sin|sinh|sqrt|tan|tanh|trunc)
  |
  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\b(?!\$)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.math.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.mc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.math.mc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>support.constant.property.math.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)(?&lt;!\.|\$)\b(System)(?:\s*(\.)\s*(
  print|println|getTimer|getClockTime|getSystemStats|trap|exit|error))?\b(?!\$)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.class.system.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.mc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.system.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x) (\.) \s* 
(?:
 (method)
)(?=\s*\()</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.js</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>switch-block</key>
		<dict>
			<key>name</key>
			<string>switch-block.expr.mc</string>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>(?=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#case-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
		</dict>
		<key>switch-expression</key>
		<dict>
			<key>name</key>
			<string>switch-expression.expr.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(switch)\s*(\()</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.mc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.mc</string>
				</dict>
			</dict>
		</dict>
		<key>switch-statement</key>
		<dict>
			<key>name</key>
			<string>switch-statement.expr.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?=\bswitch\s*\()</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#switch-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-block</string>
				</dict>
			</array>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.mc</string>
				</dict>
			</dict>
		</dict>
		<key>ternary-expression</key>
		<dict>
			<key>begin</key>
			<string>(\?)</string>
			<key>end</key>
			<string>(:)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.mc</string>
				</dict>
			</dict>
		</dict>
		<key>type</key>
		<dict>
			<key>name</key>
			<string>meta.type.mc</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-builtin-literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-fn-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-paren-or-function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-name</string>
				</dict>
			</array>
		</dict>
		<key>type-builtin-literals</key>
		<dict>
			<key>name</key>
			<string>support.type.builtin.mc</string>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(this|true|false|null)\b(?!\$)</string>
		</dict>
		<key>type-fn-type-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.type.constructor.mc</string>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(new)\b(?=\s*\&lt;)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.new.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.type.constructor.mc</string>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(new)\b\s*(?=\()</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.new.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.type.function.mc</string>
					<key>begin</key>
					<string>(?&lt;=\&gt;)\s*(?=\()</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.type.function.mc</string>
					<key>begin</key>
					<string>(?x)(
  (?=
    [(]\s*(
      ([)]) | 
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )
  )
)</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.mc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.mc</string>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
				</dict>
			</array>
		</dict>
		<key>type-paren-or-function-parameters</key>
		<dict>
			<key>name</key>
			<string>meta.type.paren.cover.mc</string>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.mc</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.mc</string>
				</dict>
			</dict>
		</dict>
		<key>var-expr</key>
		<dict>
			<key>name</key>
			<string>meta.var.expr.mc</string>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(var|const(?!\s+enum\b))\b(?!\$)</string>
			<key>end</key>
			<string>(?=$|;|})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#var-single-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.mc</string>
				</dict>
			</dict>
		</dict>
		<key>var-single-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.var-single-variable.expr.mc</string>
					<key>begin</key>
					<string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\s*
  (=\s*(
    (function\s*[(&lt;]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;) |
    ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
    ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
    ((&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;))
  ) |
  (:\s*(
    (&lt;) |
    ([(]\s*(
      ([)]) |
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )))
  )
)</string>
					<key>end</key>
					<string>(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.var-single-variable.expr.mc</string>
					<key>begin</key>
					<string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
					<key>end</key>
					<string>(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.var-single-variable.expr.mc</string>
					<key>begin</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>end</key>
					<string>(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.mc</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>variable-initializer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|!)(=)(?!=)(?=\s*\S)</string>
					<key>end</key>
					<string>(?=$|[,);}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.mc</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|!)(=)(?!=)</string>
					<key>end</key>
					<string>(?=[,);}\]])|(?=^\s*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.mc</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>mc</string>
	</array>
</dict>
</plist>
