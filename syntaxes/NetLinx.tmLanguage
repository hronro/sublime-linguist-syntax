<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>NetLinx</string>
	<key>scopeName</key>
	<string>source.netlinx</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-enabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-disabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-other</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>name</key>
			<string>meta.dps.netlinx</string>
			<key>match</key>
			<string>(\d{1,5})(:)(\d{1,5})(:)(\d{1,5})</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.dps.device.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.colon.dps.netlinx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.dps.port.netlinx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.colon.dps.netlinx</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.dps.system.netlinx</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>constant.numeric.netlinx</string>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>constant.numeric.hex.netlinx</string>
			<key>match</key>
			<string>(\$[0-9a-fA-F]+)</string>
		</dict>
		<dict>
			<key>name</key>
			<string>string.quoted.single.netlinx</string>
			<key>begin</key>
			<string>&apos;</string>
			<key>end</key>
			<string>&apos;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.netlinx</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.netlinx</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>meta.preprocessor.macro.netlinx</string>
			<key>begin</key>
			<string>(?ix)
        		^\s*(\#(define))\s+             # define
        		((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
        		(?:                              # and optionally:
        		    (\()                         # an open parenthesis
        		        (
        		            \s* \g&lt;id&gt; \s*       # first argument
        		            ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
        		            (?:\.\.\.)?          # varargs ellipsis?
        		        )
        		    (\))                         # a close parenthesis
        		)?
        	</string>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>punctuation.separator.continuation.netlinx</string>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.define.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.define.netlinx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.preprocessor.netlinx</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.netlinx</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.preprocessor.netlinx</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.netlinx</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.netlinx</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>include</key>
			<string>#pragma-mark</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#block</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?i)\s*\b(define_function)\b\s+</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>entity.name.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b([a-z_]\w*)\b(?=\s*\()</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#netlinx_keywords</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.type.user.netlinx</string>
					<key>match</key>
					<string>(?i)([a-z_][a-z0-9_]*)(?=\s+)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#netlinx_variables</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.define.netlinx</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>include</key>
			<string>#netlinx_keywords</string>
		</dict>
		<dict>
			<key>name</key>
			<string>support.function.user.netlinx</string>
			<key>match</key>
			<string>(?i)(?i)\b([a-z_][a-z0-9_]*)\b(?=\s*\()</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#netlinx_variables</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access</key>
		<dict>
			<key>name</key>
			<string>variable.other.dot-access.netlinx</string>
			<key>match</key>
			<string>(?i)\.[a-zA-Z_][a-zA-Z_0-9]*\b(?!\s*\()</string>
		</dict>
		<key>block</key>
		<dict>
			<key>name</key>
			<string>meta.block.netlinx</string>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<key>block_innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#preprocessor-rule-enabled-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#preprocessor-rule-disabled-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#preprocessor-rule-other-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#access</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.initialization.netlinx</string>
					<key>match</key>
					<string>(?x)
			        (?x)
			(?:
			     (?: (?= \s )           (?&lt;!else|return) (?&lt;=\w)\s+      #  or word + space before name
			     )
			)
			(
				(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name
				(?: (?&lt;=operator) (?: [-*&amp;&lt;&gt;=+!]+ | \(\) | \[\] ) )?  # if it is a NetLinx operator
			)
			 \s*(\()</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.netlinx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>comment.block.netlinx</string>
					<key>match</key>
					<string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.block.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.netlinx</string>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.netlinx</string>
					<key>begin</key>
					<string>\(\*</string>
					<key>end</key>
					<string>\*\)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.stray-comment-end.netlinx</string>
					<key>match</key>
					<string>\*/.*\n</string>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.line.banner.netlinx</string>
					<key>match</key>
					<string>^// =(\s*.*?)\s*=\s*$\n?</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.line.double-slash.netlinx</string>
					<key>begin</key>
					<string>//</string>
					<key>end</key>
					<string>$\n?</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>punctuation.separator.continuation.netlinx</string>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.netlinx</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*if(n?def)?\b.*$</string>
			<key>end</key>
			<string>^\s*#\s*endif\b.*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#disabled</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pragma-mark</string>
				</dict>
			</array>
		</dict>
		<key>dps_variables</key>
		<dict>
			<key>match</key>
			<string>(?i)[a-z0-9_]+\.\b(number|port|system)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.variable.system.dps.dot-access.netlinx</string>
				</dict>
			</dict>
		</dict>
		<key>netlinx_constants</key>
		<dict>
			<key>name</key>
			<string>constant.other.netlinx</string>
			<key>match</key>
			<string>\b(dv|vdv|btn|lvl|ch|adr)?([A-Z0-9_]+)\b</string>
		</dict>
		<key>netlinx_keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.control.netlinx</string>
					<key>match</key>
					<string>(?i)(\s*#\b(define|disable_warning|else|end_if|if_defined|if_not_defined|include|warn)\b)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.netlinx</string>
					<key>match</key>
					<string>(?i)\b(call|define_call|system_call)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(length_array|max_length_array|set_length_array)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.netlinx</string>
					<key>match</key>
					<string>(?i)\b(clear_buffer|create_buffer|create_multi_buffer)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(on|off|total_off)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(clkmgr_set_daylightsavings_offset|clkmgr_delete_userdefined_timeserver|clkmgr_get_active_timeserver|clkmgr_get_daylightsavings_offset|clkmgr_get_end_daylightsavings_rule|clkmgr_get_resync_period|clkmgr_get_start_daylightsavings_rule|clkmgr_get_timeservers|clkmgr_get_timezone|clkmgr_is_daylightsavings_on|clkmgr_is_network_sourced|clkmgr_set_active_timeserver|clkmgr_set_clk_source|clkmgr_set_daylightsavings_mode|clkmgr_set_daylightsavings_offset|clkmgr_set_end_daylightsavings_rule|clkmgr_set_resync_period|clkmgr_set_start_daylightsavings_rule|clkmgr_set_timezone|)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.combine.netlinx</string>
					<key>match</key>
					<string>(?i)\b(combine_channels|combine_devices|combine_levels|uncombine_channels|uncombine_devices|uncombine_levels)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.compiler.netlinx</string>
					<key>match</key>
					<string>(?i)\b(__DATE__|__FILE__|__LDATE__|__LINE__|__NAME__|__TIME__)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.netlinx</string>
					<key>match</key>
					<string>(?i)\b(break|return|default|else|for|if|include|select|active|switch|case|while|medium_while|long_while)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.language.netlinx</string>
					<key>match</key>
					<string>(?i)\b(true|false)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(atoi|atof|atol|ch_to_wc|ftoa|hextoi|itoa|format|itohex|raw_be|raw_le)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.event.data.netlinx</string>
					<key>match</key>
					<string>(?i)\b(awake|command|hold|onerror|offline|online|standby)\b</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\b(char|widechar|integer|sinteger|long|slong|float|double|dev|devchan)\b\s+([a-z_]\w*)\b(?!\()</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.system.netlinx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.variable.system.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>support.type.system.netlinx</string>
					<key>match</key>
					<string>(?i)\b(char|widechar|integer|sinteger|long|slong|float|double|dev|devchan)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(device_id|device_id_string|device_info|device_standby|device_wake|dynamic_application_device|master_slot|master_sn|reboot|send_command|system_number)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(length_variable_to_string|variable_to_xml|xml_to_variable|length_variable_to_xml)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.event.netlinx</string>
					<key>match</key>
					<string>(?i)\b(button_event|channel_event|data_event|level_event|rebuild_event)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(file_close|file_copy|file_createdir|file_delete|file_dir|file_getdir|file_open|file_read|file_read_line|file_removedir|file_rename|file_seek|file_setdir|file_write|file_write_line)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(get_last|get_multi_buffer_string|get_pulse_time|get_serial_number|get_system_number|get_timer|get_unique_id|get_url_list)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(add_url_entry|delete_url_entry|get_dns_list|get_ip_address|ip_bound_client_open|ip_client_close|ip_client_open|ip_mc_server_open|ip_server_close|ip_server_open|ip_set_option|set_ip_address|set_dns_list)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(~levsyncon|~levsyncoff|create_level|send_level|set_virtual_level_count)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.log.netlinx</string>
					<key>match</key>
					<string>(?i)\b(set_log_level|get_log_level|amx_log)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(exp_value|log_value|log10_value|power_value|sqrt_value)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(duet_mem_size_get|duet_mem_size_set|module_name)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.netlinx</string>
					<key>match</key>
					<string>(\&amp;|~|\||\^|&lt;|\%|\!|&gt;|=|\&quot;)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(dynamic_polled_port|first_local_port|static_port_binding)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.netlinx</string>
					<key>match</key>
					<string>(?i)\b(push|release)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(repeat|do_push|do_push_timed|do_release|min_to|push|push_channel|push_devchan|push_device|release|release_channel|release_devchan|release_device|to)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(set_outdoor_temperature|set_pulse_time|pulse|set_system_number|set_timer|set_virtual_channel_count|set_virtual_port_count)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(smtp_server_config_set|smtp_server_config_get|smtp_send)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(chard|chardm|compare_string|find_string|left_string|length_string|lower_string|max_length_string|mid_string|redirect_string|remove_string|right_string|send_string|set_length_string|string|string_to_variable|upper_string|variable_to_string)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(struct|structure)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(astro_clock|clock|date|date_to_day|date_to_month|date_to_year|day|day_of_week|ldate|time|time_to_hour|time_to_minute|time_to_second)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.timeline.netlinx</string>
					<key>match</key>
					<string>(?i)\b(timeline_active|timeline_create|timeline_event|timeline_get|timeline_kill|timeline_pause|timeline_reload|timeline_restart|timeline_set)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.netlinx</string>
					<key>match</key>
					<string>(?i)\b(_wc|wc_compare_string|wc_concat_string|wc_decode|wc_encode|wc_file_close|wc_file_open|wc_file_read|wc_file_read_line|wc_file_write|wc_file_write_line|wc_find_string|wc_get_buffer_char|wc_get_buffer_string|wc_left_string|wc_length_string|wc_lower_string|wc_max_length_string|wc_mid_string|wc_remove_string|wc_right_string|wc_set_length_string|wc_to_ch|wc_tp_encode|wc_upper_string)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.variable.netlinx</string>
					<key>match</key>
					<string>(?i)\b(abs_value|max_value|min_value|random_number|type_cast)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>storage.modifier.netlinx</string>
					<key>match</key>
					<string>(?i)\b(constant|non_volatile|persistent|local_var|stack_var|volatile)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.wait.netlinx</string>
					<key>match</key>
					<string>(?i)\b(cancel_all_wait|cancel_all_wait_until|cancel_wait|cancel_wait_until|pause_all_wait|pause_wait|restart_all_wait|restart_wait|wait|wait_until|timed_wait_until)\b</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#dps_variables</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#netlinx_constants</string>
				</dict>
			</array>
		</dict>
		<key>netlinx_variables</key>
		<dict>
			<key>name</key>
			<string>variable.other.netlinx</string>
			<key>match</key>
			<string>\w+</string>
		</dict>
		<key>parens</key>
		<dict>
			<key>name</key>
			<string>meta.parens.netlinx</string>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>pragma-mark</key>
		<dict>
			<key>name</key>
			<string>meta.section</string>
			<key>match</key>
			<string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.pragma.netlinx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.toc-list.pragma-mark.netlinx</string>
				</dict>
			</dict>
		</dict>
		<key>preprocessor-rule-disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0)\b).*</string>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b)</string>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.netlinx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.preprocessor.if-branch</string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.netlinx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.netlinx</string>
				</dict>
			</dict>
		</dict>
		<key>preprocessor-rule-disabled-block</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0)\b).*</string>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b)</string>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#block_innards</string>
						</dict>
					</array>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.netlinx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.preprocessor.if-branch.in-block</string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.netlinx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.netlinx</string>
				</dict>
			</dict>
		</dict>
		<key>preprocessor-rule-enabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0*1)\b)</string>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>contentName</key>
					<string>comment.block.preprocessor.else-branch</string>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b).*</string>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.netlinx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.netlinx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.netlinx</string>
				</dict>
			</dict>
		</dict>
		<key>preprocessor-rule-enabled-block</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0*1)\b)</string>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>contentName</key>
					<string>comment.block.preprocessor.else-branch.in-block</string>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b).*</string>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.netlinx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.netlinx</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#block_innards</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.netlinx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.netlinx</string>
				</dict>
			</dict>
		</dict>
		<key>preprocessor-rule-other</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b).*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.netlinx</string>
				</dict>
			</dict>
		</dict>
		<key>preprocessor-rule-other-block</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b).*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.netlinx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.netlinx</string>
				</dict>
			</dict>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.other.placeholder.netlinx</string>
					<key>match</key>
					<string>(?x)%
    						(\d+\$)?                             # field (argument #)
    						[#0\- +&apos;]*                           # flags
    						[,;:_]?                              # separator character (AltiVec)
    						((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
    						(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
    						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
    						[diouxXDOUeEfFgGaACcSspn%]           # conversion type
    					</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.placeholder.netlinx</string>
					<key>match</key>
					<string>%</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>axs</string>
		<string>axi</string>
	</array>
</dict>
</plist>
