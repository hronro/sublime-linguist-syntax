<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>nushell</string>
	<key>scopeName</key>
	<string>source.nushell</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#define-variable</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#define-alias</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#extern</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#module</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#use-module</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#expression</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>binary</key>
		<dict>
			<key>name</key>
			<string>constant.binary.nushell</string>
			<key>begin</key>
			<string>\b(0x)(\[)</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.numeric.nushell</string>
					<key>match</key>
					<string>[0-9a-fA-F]{2}</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.begin.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>braced-expression</key>
		<dict>
			<key>name</key>
			<string>meta.expression.braced.nushell</string>
			<key>begin</key>
			<string>(\{)(?:\s*\|([\w, ]*)\|)?</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.record-entry.nushell</string>
					<key>begin</key>
					<string>((?:(?:[^$\(\{\[&quot;&apos;#\s][^\(\{\[&quot;&apos;#\s]*)|\$?(?:&quot;[^&quot;]+&quot;|&apos;[^&apos;]+&apos;)))\s*(:)\s*</string>
					<key>end</key>
					<string>(?=,|\s|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.nushell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#paren-expression</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#operators</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>source.nushell</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.block.begin.bracket.curly.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameter</string>
						</dict>
						<dict>
							<key>name</key>
							<string>punctuation.separator.nushell</string>
							<key>match</key>
							<string>,</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.block.end.bracket.curly.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>command</key>
		<dict>
			<key>name</key>
			<string>meta.command.nushell</string>
			<key>begin</key>
			<string>(?&lt;!\w)(?:(\^)|(?![0-9]|\$))([\w.!]+(?:(?: (?!-)[\w\-.!]+(?:(?= |\))|$)|[\w\-.!]+))*|(?&lt;=\^)\$?(?:&quot;[^&quot;]+&quot;|&apos;[^&apos;]+&apos;))</string>
			<key>end</key>
			<string>(?=\||\)|\}|;)|$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#control-keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:ansi|char) \w+</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>keyword.other.builtin.nushell</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>(a(?:l(?:ias|l)|n(?:si(?: (?:gradient|link|strip))?|y)|ppend|st)|b(?:its(?: (?:and|not|or|ro(?:l|r)|sh(?:l|r)|xor))?|reak|ytes(?: (?:a(?:dd|t)|build|collect|ends-with|index-of|length|re(?:move|place|verse)|starts-with))?)|c(?:al|d|har|lear|o(?:l(?:lect|umns)|m(?:mandline|p(?:act|lete))|n(?:fig(?: (?:env|nu|reset))?|st|tinue))|p)|d(?:ate(?: (?:format|humanize|list-timezone|now|to-(?:record|t(?:able|imezone))))?|e(?:bug|code(?: (?:base64|hex))?|f(?:-env|ault)?|scribe|tect columns)|fr (?:a(?:gg(?:-groups)?|ll-(?:false|true)|ppend|rg-(?:m(?:ax|in)|sort|true|unique|where)|s(?:-date(?:time)?)?)|c(?:ache|o(?:l(?:lect|umns)?|n(?:cat(?:-str|enate)|tains)|unt(?:-null)?)|umulative)|d(?:rop(?:-(?:duplicates|nulls))?|types|ummies)|exp(?:lode|r-not)|f(?:etch|i(?:l(?:l-n(?:an|ull)|ter(?:-with)?)|rst)|latten)|g(?:et(?:-(?:day|hour|m(?:inute|onth)|nanosecond|ordinal|second|week(?:day)?|year))?|roup-by)|i(?:nto-(?:df|lazy|nu)|s-(?:duplicated|in|n(?:ot-null|ull)|unique))|join|l(?:ast|i(?:st|t)|owercase|s)|m(?:ax|e(?:an|dian|lt)|in)|n(?:-unique|ot)|o(?:pen|therwise)|qu(?:antile|ery)|r(?:e(?:name|place(?:-all)?|verse)|olling)|s(?:ample|e(?:lect|t(?:-with-idx)?)|h(?:ape|ift)|lice|ort-by|t(?:d|r(?:-(?:lengths|slice)|ftime))|um(?:mary)?)|t(?:ake|o-(?:arrow|csv|parquet))|u(?:nique|ppercase)|va(?:lue-counts|r)|w(?:hen|ith-column))|o|rop(?: (?:column|nth))?|u)|e(?:ach(?: while)?|cho|n(?:code(?: (?:base64|hex))?|ter|umerate)|rror make|very|x(?:ec|it|p(?:l(?:ain|ore)|ort(?: (?:alias|def(?:-env)?|extern|old-alias|use)|-env)?)|tern))|f(?:i(?:l(?:l|ter)|nd|rst)|latten|mt|or(?:mat(?: filesize)?)?|rom(?: (?:csv|eml|i(?:cs|ni)|json|nuon|ods|p(?:arquet|list)|ssv|t(?:oml|sv)|url|vcf|x(?:lsx|ml)|y(?:aml|ml)))?)|g(?:et|lob|r(?:id|oup(?:-by)?)|stat)?|h(?:ash(?: (?:base64|md5|sha256))?|e(?:aders|lp(?: (?:aliases|commands|externs|modules|operators))?)|i(?:de(?:-env)?|st(?:o(?:gram|ry(?: session)?))?)|ttp(?: (?:delete|get|head|p(?:atch|ost|ut)))?)|i(?:f|gnore|n(?:c|put|s(?:ert|pect)|to(?: (?:b(?:inary|ool)|d(?:atetime|ecimal|uration)|filesize|int|record|s(?:qlite|tring)))?)|s-(?:admin|empty)|tems)|j(?:oin|son path)|k(?:eybindings(?: (?:default|list(?:en)?))?|ill)|l(?:ast|e(?:ngth|t(?:-env)?)|ines|o(?:ad-env|op)|s)|m(?:at(?:ch|h(?: (?:a(?:bs|rc(?:cos(?:h)?|sin(?:h)?|tan(?:h)?)|vg)|c(?:eil|os(?:h)?)|e(?:val|xp)?|floor|l(?:n|og)|m(?:ax|edian|in|ode)|p(?:i|roduct)|round|s(?:in(?:h)?|qrt|tddev|um)|ta(?:n(?:h)?|u)|variance))?)|e(?:rge|tadata)|kdir|o(?:dule|ve)|ut|v)|n(?:u-(?:check|highlight))?|o(?:ld-alias|pen|verlay(?: (?:hide|list|new|use))?)|p(?:a(?:r(?:-each|se)|th(?: (?:basename|dirname|ex(?:ists|pand)|join|parse|relative-to|split|type))?)|eriodic-table|lot|net|ort|r(?:epend|int|ofile)|s)?|query(?: (?:db|json|web|xml))?|r(?:an(?:dom(?: (?:bool|chars|d(?:ecimal|ice)|integer|uuid))?|ge)|e(?:duce|g(?:ex|ist(?:er|ry query))|ject|name|turn|verse)|m|o(?:ll(?: (?:down|left|right|up))?|tate)|un-external)|s(?:ave|chema|e(?:lect|q(?: (?:char|date))?)|h(?:ells|uffle)|ize|kip(?: (?:until|while))?|leep|o(?:rt(?:-by)?|urce(?:-env)?)|plit(?: (?:c(?:hars|olumn)|list|row|words)|-by)?|t(?:art|r(?: (?:c(?:a(?:mel-case|pitalize)|o(?:llect|ntains))|d(?:istance|owncase)|ends-with|find-replace|index-of|join|kebab-case|l(?:ength|pad)|pascal-case|r(?:e(?:place|verse)|pad)|s(?:creaming-snake-case|nake-case|tarts-with|ubstring)|t(?:itle-case|o-(?:d(?:atetime|ecimal)|int)|rim)|upcase))?)|ys)|t(?:a(?:ble|ke(?: (?:until|while))?)|erm size|imeit|o(?: (?:csv|html|json|md|nuon|t(?:ext|oml|sv)|xml|yaml)|uch)?|r(?:anspose|y)|utor)|u(?:niq(?:-by)?|p(?:date(?: cells)?|sert)|rl(?: (?:build-query|encode|join|parse))?|se)|v(?:alues|ersion|iew(?: (?:files|s(?:ource|pan)))?)|w(?:atch|h(?:ere|i(?:ch|le))|i(?:ndow|th-env)|rap)|xyplot|zip)(?![\w-])( (.*))?</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.builtin.nushell</string>
								</dict>
								<key>2</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#value</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>name</key>
							<string>entity.name.type.external.nushell</string>
							<key>match</key>
							<string>(?&lt;=\^)(?:\$(&quot;[^&quot;]+&quot;|&apos;[^&apos;]+&apos;)|&quot;[^&quot;]+&quot;|&apos;[^&apos;]+&apos;)</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#paren-expression</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>([\w.]+(?:-[\w.!]+)*)(?: (.*))?</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.external.nushell</string>
								</dict>
								<key>2</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#value</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#value</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>comment</key>
		<dict>
			<key>name</key>
			<string>comment.nushell</string>
			<key>match</key>
			<string>(#.*)$</string>
		</dict>
		<key>constant-keywords</key>
		<dict>
			<key>name</key>
			<string>constant.language.nushell</string>
			<key>match</key>
			<string>\b(?:true|false|null)\b</string>
		</dict>
		<key>constant-value</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#constant-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#datetime</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numbers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numbers-hexa</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#binary</string>
				</dict>
			</array>
		</dict>
		<key>control-keywords</key>
		<dict>
			<key>name</key>
			<string>keyword.control.nushell</string>
			<key>match</key>
			<string>(?&lt;![0-9a-zA-Z_\-.\/:\\])(?:break|continue|else(?: if)?|for|if|loop|mut|return|try|while)(?![0-9a-zA-Z_\-.\/:\\])</string>
		</dict>
		<key>datetime</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.nushell</string>
			<key>match</key>
			<string>\b\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:\+\d{2}:?\d{2}|Z)?)?\b</string>
		</dict>
		<key>define-alias</key>
		<dict>
			<key>match</key>
			<string>((?:export )?alias)\s+([\w\-!]+)\s*(=)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.nushell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#operators</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>define-extern</key>
		<dict>
			<key>match</key>
			<string>((?:export\s+)?extern)\s+([\w\-!]+|&quot;[\w\-! ]+&quot;)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>define-function</key>
		<dict>
			<key>match</key>
			<string>((?:export\s+)?def(?:-env)?)\s+([\w\-!]+|&quot;[\w\-! ]+&quot;)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>define-variable</key>
		<dict>
			<key>match</key>
			<string>(let(?:-env)?|mut|const)\s+(\w+)\s*(=)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.nushell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#operators</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#pre-command</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#for-loop</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constant-value</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#command</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value</string>
				</dict>
			</array>
		</dict>
		<key>extern</key>
		<dict>
			<key>begin</key>
			<string>((?:export\s+)?extern)\s+([\w\-]+|&quot;[\w\- ]+&quot;)</string>
			<key>end</key>
			<string>(?&lt;=\])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#define-extern</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>for-loop</key>
		<dict>
			<key>name</key>
			<string>meta.for-loop.nushell</string>
			<key>begin</key>
			<string>(for)\s+(\$?\w+)\s+(in)\s+(.+)\s*(\{)</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.nushell</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.nushell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.nushell</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value</string>
						</dict>
					</array>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.block.begin.bracket.curly.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.block.end.bracket.curly.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>function</key>
		<dict>
			<key>begin</key>
			<string>((?:export\s+)?def(?:-env)?)\s+([\w\-]+|&quot;[\w\- ]+&quot;)</string>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#define-function</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#define-extern</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>function-body</key>
		<dict>
			<key>name</key>
			<string>meta.function.body.nushell</string>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.nushell</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>function-parameter</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-parameter-declare</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameter-default-value</string>
				</dict>
			</array>
		</dict>
		<key>function-parameter-declare</key>
		<dict>
			<key>match</key>
			<string>(-{0,2}[\w-]+|\.{3})(?:\((-[\w?])\))?(?:\s*(\??:)\s*(\w+)(?:@((?:&quot;[^&quot;]+&quot;)|(?:&apos;[^&apos;]+&apos;)))?)?</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.nushell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.nushell</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.nushell</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>string.quoted.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>function-parameter-default-value</key>
		<dict>
			<key>begin</key>
			<string>=\s*</string>
			<key>end</key>
			<string>(?=\])|,|$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value</string>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.nushell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.nushell</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>function-parameters</key>
		<dict>
			<key>name</key>
			<string>meta.function.parameters.nushell</string>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-parameter</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>internal-variables</key>
		<dict>
			<key>name</key>
			<string>variable.language.nushell</string>
			<key>match</key>
			<string>\$(?:nu|env)\b</string>
		</dict>
		<key>keyword</key>
		<dict>
			<key>name</key>
			<string>keyword.other.nushell</string>
			<key>match</key>
			<string>(?:def(?:-env)?)</string>
		</dict>
		<key>module</key>
		<dict>
			<key>name</key>
			<string>meta.module.nushell</string>
			<key>begin</key>
			<string>(module)\s+([\w\-]+)\s*\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.nushell</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.namespace.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.module.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>numbers</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.nushell</string>
			<key>match</key>
			<string>(?&lt;![\w-])[-+]?(?:\d+|\d{1,3}(?:_\d{3})*)(?:\.\d*)?(?i:ns|us|ms|sec|min|hr|day|wk|b|kb|mb|gb|tb|pt|eb|zb|kib|mib|gib|tib|pit|eib|zib)?(?:(?![\w.])|(?=\.\.))</string>
		</dict>
		<key>numbers-hexa</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.nushell</string>
			<key>match</key>
			<string>(?&lt;![\w-])0x[0-9a-fA-F]+(?![\w.])</string>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#operators-word</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators-symbols</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ranges</string>
				</dict>
			</array>
		</dict>
		<key>operators-symbols</key>
		<dict>
			<key>name</key>
			<string>keyword.control.nushell</string>
			<key>match</key>
			<string>(?&lt;= )(?:\+|\-|\*|\/|\/\/|\*\*|!=|[&lt;&gt;=]=?|[!=]~|&amp;&amp;|\|\||\||\+\+=?)(?= |$)</string>
		</dict>
		<key>operators-word</key>
		<dict>
			<key>name</key>
			<string>keyword.control.nushell</string>
			<key>match</key>
			<string>(?&lt;= |\()(?:mod|in|not-in|not|and|or|xor|bit-or|bit-and|bit-xor|bit-shl|bit-shr|starts-with|ends-with)(?= |\)|$)</string>
		</dict>
		<key>parameters</key>
		<dict>
			<key>name</key>
			<string>variable.parameter.nushell</string>
			<key>match</key>
			<string>\b-{1,2}[\w-]*</string>
		</dict>
		<key>paren-expression</key>
		<dict>
			<key>name</key>
			<string>meta.expression.parenthesis.nushell</string>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>pre-command</key>
		<dict>
			<key>begin</key>
			<string>(\w+)(=)</string>
			<key>end</key>
			<string>(?=\s+)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.nushell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#operators</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>ranges</key>
		<dict>
			<key>name</key>
			<string>keyword.control.nushell</string>
			<key>match</key>
			<string>\.\.&lt;?|:</string>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-single-quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-backtick</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-double-quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-interpolated-double</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-interpolated-single</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-bare</string>
				</dict>
			</array>
		</dict>
		<key>string-backtick</key>
		<dict>
			<key>name</key>
			<string>string.quoted.single.nushell</string>
			<key>begin</key>
			<string>`</string>
			<key>end</key>
			<string>`</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>string-bare</key>
		<dict>
			<key>name</key>
			<string>string.bare.nushell</string>
			<key>match</key>
			<string>[^$\[{(&quot;&apos;,|#\s|][^\[\]{}()&quot;&apos;\s#,|]*</string>
		</dict>
		<key>string-double-quote</key>
		<dict>
			<key>name</key>
			<string>string.quoted.double.nushell</string>
			<key>begin</key>
			<string>&quot;</string>
			<key>end</key>
			<string>&quot;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\w+</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-escape</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>string-escape</key>
		<dict>
			<key>name</key>
			<string>constant.character.escape.nushell</string>
			<key>match</key>
			<string>\\(?:[bfrnt\\&apos;&quot;/]|u[0-9a-fA-F]{4})</string>
		</dict>
		<key>string-interpolated-double</key>
		<dict>
			<key>name</key>
			<string>string.interpolated.double.nushell</string>
			<key>begin</key>
			<string>\$&quot;</string>
			<key>end</key>
			<string>&quot;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.character.escape.nushell</string>
					<key>match</key>
					<string>\\[()]</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-escape</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>string-interpolated-single</key>
		<dict>
			<key>name</key>
			<string>string.interpolated.single.nushell</string>
			<key>begin</key>
			<string>\$&apos;</string>
			<key>end</key>
			<string>&apos;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>string-single-quote</key>
		<dict>
			<key>name</key>
			<string>string.quoted.single.nushell</string>
			<key>begin</key>
			<string>&apos;</string>
			<key>end</key>
			<string>&apos;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>table</key>
		<dict>
			<key>name</key>
			<string>meta.table.nushell</string>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value</string>
				</dict>
				<dict>
					<key>name</key>
					<string>punctuation.separator.nushell</string>
					<key>match</key>
					<string>,</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.begin.nushell</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.end.nushell</string>
				</dict>
			</dict>
		</dict>
		<key>use-module</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>^\s*((?:export )?use)\s+([\w\-]+|&quot;[\w\- ]+&quot;|&apos;[\w\- ]+&apos;)(?:\s+([\w\-]+|&quot;[\w\- ]+&quot;|&apos;[\w\- ]+&apos;|\*))?\s*;?$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.nushell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.namespace.nushell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.other.nushell</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*((?:export )?use)\s+([\w\-]+|&quot;[\w\- ]+&quot;|&apos;[\w\- ]+&apos;)\s*\[</string>
					<key>end</key>
					<string>(\])\s*;?\s*$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>([\w\-]+|&quot;[\w\- ]+&quot;|&apos;[\w\- ]+&apos;|\*),?</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.nushell</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.nushell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.namespace.nushell</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.end.nushell</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;path&gt;(?:/|\\|~[\/\\]|\.\.?[\/\\])?(?:[^\/\\]+[\/\\])*[\w\- ]+(?:\.nu)?){0}^\s*((?:export )?use)\s+(&quot;\g&lt;path&gt;&quot;|&apos;\g&lt;path&gt;\&apos;|(?![&quot;&apos;])\g&lt;path&gt;)(?:\s+([\w\-]+|&quot;[\w\- ]+&quot;|&apos;[^&apos;]+&apos;|\*))?\s*;?$</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.nushell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>string.bare.nushell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>([\w\- ]+)(?:\.nu)?(?=$|&quot;|&apos;)</string>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>entity.name.namespace.nushell</string>
										</dict>
									</dict>
								</dict>
							</array>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.other.nushell</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;path&gt;(?:/|\\|~[\/\\]|\.\.?[\/\\])?(?:[^\/\\]+[\/\\])*[\w\- ]+(?:\.nu)?){0}^\s*((?:export )?use)\s+(&quot;\g&lt;path&gt;&quot;|&apos;\g&lt;path&gt;\&apos;|(?![&quot;&apos;])\g&lt;path&gt;)\s+\[</string>
					<key>end</key>
					<string>(\])\s*;?\s*$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>([\w\-]+|&quot;[\w\- ]+&quot;|&apos;[\w\- ]+&apos;|\*),?</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>keyword.other.nushell</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.nushell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>string.bare.nushell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>([\w\- ]+)(?:\.nu)?(?=$|&quot;|&apos;)</string>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>entity.name.namespace.nushell</string>
										</dict>
									</dict>
								</dict>
							</array>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.end.nushell</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>^\s*(?:export )?use\b</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.nushell</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>value</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variables</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-fields</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constant-value</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#table</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#braced-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>variable-fields</key>
		<dict>
			<key>name</key>
			<string>variable.other.nushell</string>
			<key>match</key>
			<string>(?&lt;=\)|\}|\])(?:\.(?:[\w-]+|&quot;[\w\- ]+&quot;))+</string>
		</dict>
		<key>variables</key>
		<dict>
			<key>match</key>
			<string>(\$[a-zA-Z0-9_]+)((?:\.(?:[\w-]+|&quot;[\w\- ]+&quot;))*)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#internal-variables</string>
						</dict>
						<dict>
							<key>name</key>
							<string>variable.other.nushell</string>
							<key>match</key>
							<string>\$.+</string>
						</dict>
					</array>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.nushell</string>
				</dict>
			</dict>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>nu</string>
	</array>
</dict>
</plist>
