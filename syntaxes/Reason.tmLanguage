<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>Reason</string>
	<key>scopeName</key>
	<string>source.reason</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#structure-expression-block-item</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#value-expression</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>attribute</key>
		<dict>
			<key>begin</key>
			<string>(?=\[(@{1,3})[[:space:]]*[[:alpha:]])</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[(@{1,3})</string>
					<key>end</key>
					<string>(?=[^_\.&apos;[:word:]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#attribute-identifier</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#attribute-payload</string>
				</dict>
			</array>
		</dict>
		<key>attribute-identifier</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b([[:alpha:]][[:word:]]*)\b[[:space:]]*(?:(\.))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.class entity.name.class</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.css constant.language constant.numeric</string>
					<key>match</key>
					<string>\b([[:alpha:]][[:word:]]*)\b</string>
				</dict>
			</array>
		</dict>
		<key>attribute-payload</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(:)</string>
					<key>end</key>
					<string>(?=\])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#structure-expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#module-item-type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>([\?])</string>
					<key>end</key>
					<string>(?=\])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern-guard</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pattern</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#structure-expression-block-item</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
		</dict>
		<key>class-item-inherit</key>
		<dict>
			<key>begin</key>
			<string>\b(inherit)\b</string>
			<key>end</key>
			<string>(;)|(?=}|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>class-item-method</key>
		<dict>
			<key>begin</key>
			<string>\b(method)\b</string>
			<key>end</key>
			<string>(;)|(?=}|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-name-params-type-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment-block-doc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment-block</string>
				</dict>
			</array>
		</dict>
		<key>comment-block</key>
		<dict>
			<key>name</key>
			<string>comment.block</string>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.begin</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.end</string>
				</dict>
			</dict>
		</dict>
		<key>comment-block-doc</key>
		<dict>
			<key>name</key>
			<string>comment.block.documentation</string>
			<key>begin</key>
			<string>/\*\*(?!/)</string>
			<key>end</key>
			<string>\*/</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.begin</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.end</string>
				</dict>
			</dict>
		</dict>
		<key>comment-line</key>
		<dict>
			<key>name</key>
			<string>comment.line.double-slash</string>
			<key>begin</key>
			<string>(^[ \t]+)?(//)</string>
			<key>end</key>
			<string>$</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.leading</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment</string>
				</dict>
			</dict>
		</dict>
		<key>condition-lhs</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])([\?])(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])</string>
			<key>end</key>
			<string>(?=[\)])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.control message.error variable.interpolation</string>
					<key>match</key>
					<string>(?:\b|[[:space:]]+)([?])(?:\b|[[:space:]]+)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control message.error variable.interpolation</string>
				</dict>
			</dict>
		</dict>
		<key>extension-node</key>
		<dict>
			<key>begin</key>
			<string>(?=\[(%{1,3})[[:space:]]*[[:alpha:]])</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[(%{1,3})</string>
					<key>end</key>
					<string>(?=[^_\.&apos;[:word:]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#attribute-identifier</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#attribute-payload</string>
				</dict>
			</array>
		</dict>
		<key>jsx</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-head</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tail</string>
				</dict>
			</array>
		</dict>
		<key>jsx-attributes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b([[:lower:]][[:word:]]*)\b[[:space:]]*(=)</string>
					<key>end</key>
					<string>(?&lt;![=])(?=[/&gt;[:lower:]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value-expression-atomic-with-paths</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>markup.inserted constant.language support.property-value entity.name.filename</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b([[:lower:]][[:word:]]*)\b[[:space:]]*+)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>

						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>markup.inserted constant.language support.property-value entity.name.filename</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>jsx-body</key>
		<dict>
			<key>begin</key>
			<string>((&gt;))</string>
			<key>end</key>
			<string>(?=&lt;/)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[[:lower:]][[:word:]]*</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>

				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
			</dict>
		</dict>
		<key>jsx-head</key>
		<dict>
			<key>begin</key>
			<string>((&lt;))(?=[_[:alpha:]])</string>
			<key>end</key>
			<string>((/&gt;))|(?=&lt;/)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G</string>
					<key>end</key>
					<string>(?=[[:space:]/&gt;])[[:space:]]*+</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#module-path-simple</string>
						</dict>
						<dict>
							<key>name</key>
							<string>entity.name.tag.inline.any.html</string>
							<key>match</key>
							<string>\b[[:lower:]][[:word:]]*\b</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-attributes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>

				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.js</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>

				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
			</dict>
			<key>applyEndPatternLast</key>
			<true />
		</dict>
		<key>jsx-tail</key>
		<dict>
			<key>begin</key>
			<string>\G(/&gt;)|(&lt;/)</string>
			<key>end</key>
			<string>(&gt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-path-simple</string>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.tag.inline.any.html</string>
					<key>match</key>
					<string>\b[[:lower:]][[:word:]]*\b</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.js</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
			</dict>
			<key>applyEndPatternLast</key>
			<true />
		</dict>
		<key>module-item-class-type</key>
		<dict>
			<key>begin</key>
			<string>\b(class)\b</string>
			<key>end</key>
			<string>(;)|(?=}|\b(and|class|constraint|exception|external|include|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:\G|^)[[:space:]]*\b(type)\b</string>
					<key>end</key>
					<string>(?==)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#module-item-type-bind-name-tyvars</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(=)</string>
					<key>end</key>
					<string>(?=;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#attribute</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#class-item-inherit</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#class-item-method</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-exception</key>
		<dict>
			<key>begin</key>
			<string>\b(exception)\b</string>
			<key>end</key>
			<string>(;)|(?=}|\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind-body-item</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-external</key>
		<dict>
			<key>begin</key>
			<string>\b(external)\b</string>
			<key>end</key>
			<string>(;)|(?=}|\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-name-or-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-type</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(=)</string>
					<key>end</key>
					<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#attribute</string>
						</dict>
						<dict>
							<key>name</key>
							<string>string.double string.regexp</string>
							<key>begin</key>
							<string>&quot;</string>
							<key>end</key>
							<string>&quot;</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#value-literal-string-escape</string>
								</dict>
								<dict>
									<key>match</key>
									<string>(?:(%)(.*?)|(caml.*?))(?=&quot;|(?:[^\\\n]$))</string>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>entity.other.attribute-name.css constant.language constant.numeric</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
										</dict>
									</dict>
								</dict>
							</array>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-include</key>
		<dict>
			<key>begin</key>
			<string>\b(include)\b</string>
			<key>end</key>
			<string>(;)|(?=}|\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#signature-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.include</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let</key>
		<dict>
			<key>begin</key>
			<string>\b(let)\b</string>
			<key>end</key>
			<string>(;)|(?=}|\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-module</key>
		<dict>
			<key>begin</key>
			<string>(?:\G|^)[[:space:]]*\b(module)\b</string>
			<key>end</key>
			<string>(?=[;}]|\b(class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-and</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-rec</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-bind-name-params-type-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.control storage.type message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-module-and</key>
		<dict>
			<key>begin</key>
			<string>\b(and)\b</string>
			<key>end</key>
			<string>(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-bind-name-params-type-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-module-bind-body</key>
		<dict>
			<key>begin</key>
			<string>(=&gt;?)</string>
			<key>end</key>
			<string>(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#structure-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.less</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-module-bind-name-params</key>
		<dict>
			<key>begin</key>
			<string>\b([[:upper:]][[:word:]]*)\b</string>
			<key>end</key>
			<string>(?=[;:}=]|\b(class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-param</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class entity.name.class</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-module-bind-name-params-type-body</key>
		<dict>
			<key>begin</key>
			<string>(?:\G|^)</string>
			<key>end</key>
			<string>(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-bind-name-params</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-bind-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-bind-body</string>
				</dict>
			</array>
		</dict>
		<key>module-item-let-module-bind-type</key>
		<dict>
			<key>begin</key>
			<string>(:)</string>
			<key>end</key>
			<string>(?=[;}=]|\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#signature-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-module-param</key>
		<dict>
			<key>begin</key>
			<string>(?=\()</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>(?=[:])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#module-name-simple</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(:)</string>
					<key>end</key>
					<string>(?=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#signature-expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module-item-let-module-rec</key>
		<dict>
			<key>begin</key>
			<string>(?:\G|^)[[:space:]]*\b(rec)\b</string>
			<key>end</key>
			<string>(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-bind-name-params-type-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control storage.modifier.rec</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-value</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-and</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-rec</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-name-params-type-body</string>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-and</key>
		<dict>
			<key>begin</key>
			<string>\b(and)\b</string>
			<key>end</key>
			<string>(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-name-params-type-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-value-bind-body</key>
		<dict>
			<key>begin</key>
			<string>(=&gt;?)</string>
			<key>end</key>
			<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.less</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-value-bind-name-or-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[^[:word:]]and|^and|[^[:word:]]external|^external|[^[:word:]]let|^let|[^[:word:]]method|^method|[^[:word:]]rec|^rec)[[:space:]]*</string>
			<key>end</key>
			<string>(?&lt;=[^[:space:]])|(?=[[:space:]]|[;:}=]|\b(and|as|class|constraint|exception|external|for|include|inherit|let|method|module|nonrec|open|private|rec|switch|try|type|val|while|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:([_][[:word:]]+)|([[:lower:]][[:word:]]*))\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-parens-params</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-bind-name-params-type-body</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[^[:word:]]and|^and|[^[:word:]]external|^external|[^[:word:]]let|^let|[^[:word:]]method|^method|[^[:word:]]rec|^rec)</string>
			<key>end</key>
			<string>(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(::)</string>
					<key>end</key>
					<string>(?&lt;=[[:space:]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(=)</string>
							<key>end</key>
							<string>(\?)|(?&lt;=[^[:space:]=][[:space:]])(?=[[:space:]]*+[^\.])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#value-expression-atomic-with-paths</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>markup.inserted keyword.control.less message.error</string>
								</dict>
							</dict>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-name-or-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-params-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-body</string>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-bind-params-type</key>
		<dict>
			<key>begin</key>
			<string>(?=[^[:space:]:=])</string>
			<key>end</key>
			<string>(?=[;}=]|\b(class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-param</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;![:])(:)[[:space:]]*(?![[:space:]]*[:\)])</string>
					<key>end</key>
					<string>(?=[;}=]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-expression-atomic</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-bind-parens-params</key>
		<dict>
			<key>begin</key>
			<string>\((?![\)])</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern-parens-lhs</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation-rhs</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-bind-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[^[:word:]]and|^and|[^[:word:]]external|^external|[^[:word:]]let|^let|[^[:word:]]method|^method|[^[:word:]]rec|^rec)</string>
			<key>end</key>
			<string>(?=[;:}=]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-parens-params</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-bind-type</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;![:])(:)(?![[:space:]]*[:\)])</string>
			<key>end</key>
			<string>(?==[^&gt;]|[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(type)\b</string>
					<key>end</key>
					<string>([\.])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern-variable</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-let-value-param</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-param-label</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-param-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-param-module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-param-label</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\b[[:lower:]][[:word:]]*\b)?[[:space:]]*(::)</string>
					<key>end</key>
					<string>(?&lt;=[[:space:]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(=)</string>
							<key>end</key>
							<string>(\?)|(?&lt;=[^[:space:]=][[:space:]])(?=[[:space:]]*+[^\.])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#value-expression-atomic-with-paths</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>markup.inserted keyword.control.less message.error</string>
								</dict>
							</dict>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>markup.inserted constant.language support.property-value entity.name.filename</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-param-module</key>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(?=\b(module)\b)</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(module)\b</string>
					<key>end</key>
					<string>(?=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>support.class entity.name.class</string>
							<key>match</key>
							<string>\b[[:upper:]][[:word:]]*\b</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-param-type</key>
		<dict>
			<key>begin</key>
			<string>\((?=\b(type)\b)</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(type)\b</string>
					<key>end</key>
					<string>(?=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern-variable</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module-item-let-value-rec</key>
		<dict>
			<key>begin</key>
			<string>(?:\G|^)[[:space:]]*\b(rec)\b</string>
			<key>end</key>
			<string>(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-bind-name-params-type-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control storage.modifier message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-module</key>
		<dict>
			<key>begin</key>
			<string>\b(module)\b[[:space:]]*(?!\b(type)\b|$)</string>
			<key>end</key>
			<string>(;)|(?=}|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-and</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-rec</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let-module-bind-name-params-type-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type message.error</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-module-type</key>
		<dict>
			<key>begin</key>
			<string>\b(module)\b[[:space:]]*(?=\b(type)\b|$)</string>
			<key>end</key>
			<string>(;)|(?=}|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?:\G|^)[[:space:]]*\b(type)\b</string>
					<key>end</key>
					<string>(?==)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([[:upper:]][[:word:]]*)</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>support.class entity.name.class</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(=)</string>
					<key>end</key>
					<string>(?=;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#signature-expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control message.error</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-open</key>
		<dict>
			<key>begin</key>
			<string>\b(open)\b</string>
			<key>end</key>
			<string>(;)|(?=}|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-simple</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.open</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-type</key>
		<dict>
			<key>begin</key>
			<string>\b(type)\b</string>
			<key>end</key>
			<string>(;)|(?=[\)}]|\b(class|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-type-and</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-type-constraint</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-type-and</key>
		<dict>
			<key>begin</key>
			<string>\b(and)\b([[:space:]]*type)?</string>
			<key>end</key>
			<string>(?=[;\)}]|\b(class|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind-name-tyvars-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.css constant.language constant.numeric</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-type-bind</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind-nonrec</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind-name-tyvars-body</string>
				</dict>
			</array>
		</dict>
		<key>module-item-type-bind-body</key>
		<dict>
			<key>begin</key>
			<string>(\+?=)</string>
			<key>end</key>
			<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind-body-item</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.less</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-type-bind-body-item</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(=)(?!&gt;)|\b(private)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation storage.modifier message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([[:upper:]][[:word:]]*)\b(?![[:space:]]*[\.\(])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\.\.)</string>
					<key>end</key>
					<string>(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\|)(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])[[:space:]]*</string>
					<key>end</key>
					<string>(?=[;\)}]|\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value-expression-constructor</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([:])|\b(of)\b</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.less</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(:)|(\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]))|\b(of)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.other</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression</string>
				</dict>
			</array>
		</dict>
		<key>module-item-type-bind-name-tyvars</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\G|^|\.)[[:space:]]*\b([[:lower:]][[:word:]]*)\b</string>
			<key>end</key>
			<string>(?=\+?=|[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#attribute</string>
				</dict>
				<dict>
					<key>name</key>
					<string>comment</string>
					<key>match</key>
					<string>_</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([+\-])?(?:(_)|(&apos;)([[:lower:]][[:word:]]*)\b)(?!\.[[:upper:]])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>comment</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>comment</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter string.other.link variable.language</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-type-bind-name-tyvars-body</key>
		<dict>
			<key>begin</key>
			<string>(?=(\G|^)[[:space:]]*\b[[:alpha:]])</string>
			<key>end</key>
			<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-path-simple-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind-name-tyvars</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind-body</string>
				</dict>
			</array>
		</dict>
		<key>module-item-type-bind-nonrec</key>
		<dict>
			<key>begin</key>
			<string>(?:\G|^)[[:space:]]*\b(nonrec)\b</string>
			<key>end</key>
			<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-type-bind-name-tyvars-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control storage.modifier message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-item-type-constraint</key>
		<dict>
			<key>begin</key>
			<string>\b(constraint)\b</string>
			<key>end</key>
			<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([+\-])?(&apos;)([_[:lower:]][[:word:]]*)\b(?!\.[[:upper:]])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>comment</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter string.other.link variable.language</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.less</string>
					<key>match</key>
					<string>=</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation storage.modifier message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-name-extended</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-name-simple</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([\(])</string>
					<key>end</key>
					<string>([\)])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#module-path-extended</string>
						</dict>
					</array>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module-name-simple</key>
		<dict>
			<key>name</key>
			<string>support.class entity.name.class</string>
			<key>match</key>
			<string>\b[[:upper:]][[:word:]]*\b</string>
		</dict>
		<key>module-path-extended</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-name-extended</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([\.])</string>
					<key>end</key>
					<string>(?&lt;=[[:word:]\)])|(?=[^\.[:upper:]/])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=[\.])</string>
							<key>end</key>
							<string>(?&lt;=[[:word:]\)])|(?=[^\.[:upper:]/])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#module-name-extended</string>
								</dict>
							</array>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module-path-extended-prefix</key>
		<dict>
			<key>begin</key>
			<string>(?=\b[[:upper:]])</string>
			<key>end</key>
			<string>([\.])|(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-path-extended</string>
				</dict>
			</array>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>module-path-simple</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-name-simple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([\.])</string>
					<key>end</key>
					<string>(?&lt;=[[:word:]\)])|(?=[^\.[:upper:]/])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=[\.])</string>
							<key>end</key>
							<string>(?&lt;=[[:word:]\)])|(?=[^\.[:upper:]/])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#module-name-simple</string>
								</dict>
							</array>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>module-path-simple-prefix</key>
		<dict>
			<key>begin</key>
			<string>(?=\b[[:upper:]])</string>
			<key>end</key>
			<string>([\.])|(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-path-simple</string>
				</dict>
			</array>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>object-item</key>
		<dict>
			<key>begin</key>
			<string>\G|(;)</string>
			<key>end</key>
			<string>(?=[;}]|\b(class|constraint|exception|external|include|let|module|nonrec|open|private|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class-item-method</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#operator-infix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator-prefix</string>
				</dict>
			</array>
		</dict>
		<key>operator-infix</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
					<key>match</key>
					<string>;</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator-infix-assign</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator-infix-builtin</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator-infix-custom</string>
				</dict>
				<dict>

				</dict>
			</array>
		</dict>
		<key>operator-infix-assign</key>
		<dict>
			<key>name</key>
			<string>variable.other.class.js variable.interpolation keyword.operator keyword.control.less message.error</string>
			<key>match</key>
			<string>(?&lt;![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])(=)(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])</string>
		</dict>
		<key>operator-infix-builtin</key>
		<dict>
			<key>name</key>
			<string>variable.other.class.js variable.interpolation keyword.operator keyword.control.less message.error</string>
			<key>match</key>
			<string>:=</string>
		</dict>
		<key>operator-infix-custom</key>
		<dict>
			<key>match</key>
			<string>(?:(?&lt;![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])((&lt;&gt;))(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]))|([#\-@*/&amp;%^+&lt;=&gt;$\\][#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]*|[|][#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]+)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>

				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>operator-infix-custom-hash</key>
		<dict>
			<key>name</key>
			<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
			<key>match</key>
			<string>#[\-:!?.@*/&amp;%^+&lt;=&gt;|~$]+</string>
		</dict>
		<key>operator-prefix</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#operator-prefix-bang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator-prefix-label-token</string>
				</dict>
			</array>
		</dict>
		<key>operator-prefix-bang</key>
		<dict>
			<key>name</key>
			<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
			<key>match</key>
			<string>![\-:!?.@*/&amp;%^+&lt;=&gt;|~$]*</string>
		</dict>
		<key>operator-prefix-label-token</key>
		<dict>
			<key>name</key>
			<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
			<key>match</key>
			<string>[?~][\-:!?.@*/&amp;%^+&lt;=&gt;|~$]+</string>
		</dict>
		<key>pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#attribute</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern-atomic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[[:space:]]*+(?:(\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]))|\b(as)\b|(\.\.\.?))[[:space:]]*+</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>pattern-atomic</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.other</string>
					<key>match</key>
					<string>\b(exception)\b</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-simple-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern-list-or-array</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern-record</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern-parens</string>
				</dict>
			</array>
		</dict>
		<key>pattern-guard</key>
		<dict>
			<key>begin</key>
			<string>\b(when)\b</string>
			<key>end</key>
			<string>(?==&gt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other</string>
				</dict>
			</dict>
		</dict>
		<key>pattern-list-or-array</key>
		<dict>
			<key>begin</key>
			<string>(\[\|?)(?![@%])</string>
			<key>end</key>
			<string>(\|?\])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-list-or-array-separator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.css constant.language constant.numeric</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.css constant.language constant.numeric</string>
				</dict>
			</dict>
		</dict>
		<key>pattern-parens</key>
		<dict>
			<key>begin</key>
			<string>(?=\()</string>
			<key>end</key>
			<string>\)|(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#pattern-parens-lhs</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation-rhs</string>
				</dict>
			</array>
		</dict>
		<key>pattern-parens-lhs</key>
		<dict>
			<key>begin</key>
			<string>\(|(,)</string>
			<key>end</key>
			<string>(?=(?:[,:\)]))|(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>pattern-record</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern-record-item</string>
				</dict>
			</array>
		</dict>
		<key>pattern-record-field</key>
		<dict>
			<key>begin</key>
			<string>\b([_][[:word:]]*)\b|\b([[:lower:]][[:word:]]*)\b</string>
			<key>end</key>
			<string>(,)|(?=})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G(:)</string>
					<key>end</key>
					<string>(?=[,}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>markup.inserted constant.language support.property-value entity.name.filename</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>pattern-record-item</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-path-simple-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern-record-field</string>
				</dict>
			</array>
		</dict>
		<key>pattern-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(_(?:[[:lower:]][[:word:]]*)?)\b(?!\.[[:upper:]])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([[:lower:]][[:word:]]*)\b(?!\.[[:upper:]])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.language string.other.link</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>record-path</key>
		<dict>
			<key>begin</key>
			<string>\b[[:lower:]][[:word:]]*\b</string>
			<key>end</key>
			<string>(?=[^[:space:]\.])(?!/\*)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#record-path-suffix</string>
				</dict>
			</array>
		</dict>
		<key>record-path-suffix</key>
		<dict>
			<key>begin</key>
			<string>(\.)</string>
			<key>end</key>
			<string>(\))|\b([[:upper:]][[:word:]]*)\b|\b([[:lower:]][[:word:]]*)\b|(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([\(])</string>
					<key>end</key>
					<string>(?=[\)])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b([[:lower:]][[:word:]]*)\b(?=[^\)]*([\.]))</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>markup.inserted constant.language support.property-value entity.name.filename</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
							<key>match</key>
							<string>([\.])</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b([[:lower:]][[:word:]]*)\b[[:space:]]*</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter string.other.link variable.language</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#value-expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.class entity.name.class</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>markup.inserted constant.language support.property-value entity.name.filename</string>
				</dict>
			</dict>
		</dict>
		<key>signature-expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=\([[:space:]]*[[:upper:]][[:word:]]*[[:space:]]*:)</string>
					<key>end</key>
					<string>(?=[;])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=\()</string>
							<key>end</key>
							<string>(?=[;]|=&gt;)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#module-item-let-module-param</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(=&gt;)</string>
							<key>end</key>
							<string>(?=[;\(])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#structure-expression</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>markup.inserted keyword.control.less</string>
								</dict>
							</dict>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(module)\b[[:space:]]*\b(type)\b([[:space:]]*\b(of)\b)?</string>
					<key>end</key>
					<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#module-path-simple</string>
						</dict>
						<dict>
							<key>name</key>
							<string>support.class entity.name.class</string>
							<key>match</key>
							<string>\b([[:upper:]][[:word:]]*)\b</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>markup.inserted keyword.other variable.other.readwrite.instance</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>markup.inserted keyword.other variable.other.readwrite.instance</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#signature-expression-constraints</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#structure-expression</string>
				</dict>
			</array>
		</dict>
		<key>signature-expression-constraints</key>
		<dict>
			<key>begin</key>
			<string>(?=\b(with))</string>
			<key>end</key>
			<string>(?=[;\)}]|\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|val)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(and|with)\b</string>
					<key>end</key>
					<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(type)\b</string>
							<key>end</key>
							<string>(?=[;\)}]|\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|val|with)\b)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#module-item-type-and</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#module-item-type-constraint</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#module-item-type-bind</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.other.attribute-name.css constant.language constant.numeric</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\b(module)\b)</string>
							<key>end</key>
							<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|val|with)\b)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\b(module)\b</string>
									<key>end</key>
									<string>(?=:?=|[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\b)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#comment</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#module-path-simple</string>
										</dict>
										<dict>
											<key>name</key>
											<string>support.class entity.name.class</string>
											<key>match</key>
											<string>[[:upper:]][[:word:]]*</string>
										</dict>
									</array>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>markup.inserted keyword.control storage.type variable.other.readwrite.instance</string>
										</dict>
									</dict>
								</dict>
								<dict>
									<key>begin</key>
									<string>(:=)|(=)</string>
									<key>end</key>
									<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\b)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#structure-expression</string>
										</dict>
									</array>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>markup.inserted keyword.control.less message.error</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>markup.inserted keyword.control.less</string>
										</dict>
									</dict>
								</dict>
							</array>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation storage.modifier message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>structure-expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\((?=[[:space:]]*(\b(val)\b|[^&apos;\[&lt;[:lower:]]))</string>
					<key>end</key>
					<string>\)|(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#structure-expression-block</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(val)\b</string>
							<key>end</key>
							<string>(?=\))|(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>name</key>
									<string>support.class entity.name.class</string>
									<key>match</key>
									<string>\b([[:lower:]][[:word:]]*)\b</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#module-path-simple</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(:)</string>
							<key>end</key>
							<string>(?=[\)])|(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val)\b)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#signature-expression</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
								</dict>
							</dict>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-simple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#structure-expression-block</string>
				</dict>
			</array>
		</dict>
		<key>structure-expression-block</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#structure-expression-block-item</string>
				</dict>
			</array>
		</dict>
		<key>structure-expression-block-item</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#attribute</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-exception</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-external</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-include</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-let</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-class-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-module-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-open</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-type</string>
				</dict>
			</array>
		</dict>
		<key>type-annotation-rhs</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])([:])(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])</string>
			<key>end</key>
			<string>(?=\))|(?=[,;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>type-expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
					<key>match</key>
					<string>([\.])</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-atomic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-arrow</string>
				</dict>
			</array>
		</dict>
		<key>type-expression-arrow</key>
		<dict>
			<key>name</key>
			<string>markup.inserted keyword.control.less</string>
			<key>match</key>
			<string>=&gt;</string>
		</dict>
		<key>type-expression-atomic</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#attribute</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-extended-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-label</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation storage.modifier message.error</string>
					<key>match</key>
					<string>\b(as)\b</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-constructor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-object</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-parens</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-polymorphic-variant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-record</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-variable</string>
				</dict>
			</array>
		</dict>
		<key>type-expression-constructor</key>
		<dict>
			<key>match</key>
			<string>(_)(?![[:alnum:]])|\b([_[:lower:]][[:word:]]*)\b(?!\.[[:upper:]])</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.type string.regexp</string>
				</dict>
			</dict>
		</dict>
		<key>type-expression-label</key>
		<dict>
			<key>begin</key>
			<string>\b([_[:lower:]][[:word:]]*)\b(::)</string>
			<key>end</key>
			<string>(?&lt;==&gt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-expression</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\?)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>markup.inserted constant.language support.property-value entity.name.filename</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
			</dict>
		</dict>
		<key>type-expression-object</key>
		<dict>
			<key>begin</key>
			<string>(&lt;)</string>
			<key>end</key>
			<string>(&gt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\.\.)</string>
					<key>end</key>
					<string>(?=&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[_[:lower:]])</string>
					<key>end</key>
					<string>(,)|(?=&gt;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=[_[:lower:]])</string>
							<key>end</key>
							<string>(?=:)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\b([_[:lower:]][[:word:]]*)\b</string>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>markup.inserted constant.language support.property-value entity.name.filename</string>
										</dict>
									</dict>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(:)</string>
							<key>end</key>
							<string>(?=[,&gt;])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#type-expression</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
		</dict>
		<key>type-expression-parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(module)\b</string>
					<key>end</key>
					<string>(?=[\)])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#module-path-extended</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#signature-expression-constraints</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.less</string>
					<key>match</key>
					<string>,</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression</string>
				</dict>
			</array>
		</dict>
		<key>type-expression-polymorphic-variant</key>
		<dict>
			<key>begin</key>
			<string>(\[)([&lt;&gt;])?</string>
			<key>end</key>
			<string>(\])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\|)?(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])[[:space:]]*</string>
					<key>end</key>
					<string>(?=[;)}\]]|\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value-expression-constructor</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([:])|\b(of)\b|([&amp;])</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.less</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>include</key>
							<string>#value-expression-constructor-polymorphic</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>type-expression-record</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-expression-record-item</string>
				</dict>
			</array>
		</dict>
		<key>type-expression-record-field</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(mutable)\b</string>
					<key>end</key>
					<string>(?&lt;=[,])|(?=})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-expression-record-field-sans-modifier</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation storage.modifier message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-record-field-sans-modifier</string>
				</dict>
			</array>
		</dict>
		<key>type-expression-record-field-sans-modifier</key>
		<dict>
			<key>begin</key>
			<string>\b([_[:lower:]][[:word:]]*)\b</string>
			<key>end</key>
			<string>(,)|(?=[,}])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(:)</string>
					<key>end</key>
					<string>(?=[,}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>markup.inserted constant.language support.property-value entity.name.filename</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>type-expression-record-item</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-simple-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-expression-record-field</string>
				</dict>
			</array>
		</dict>
		<key>type-expression-variable</key>
		<dict>
			<key>match</key>
			<string>(&apos;)([_[:lower:]][[:word:]]*)\b(?!\.[[:upper:]])</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter string.other.link variable.language</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#attribute</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#extension-node</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-builtin</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-if-then-else</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-atomic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-simple-prefix</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
					<key>match</key>
					<string>[:?]</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#record-path</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-atomic</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-list-or-array</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-for</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-fun</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-block-or-record-or-object</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-label</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-parens</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-try</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-while</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-atomic-with-paths</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-atomic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-simple-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#record-path-suffix</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-block</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-block-item</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-block-item</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-item-open</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-block-look</key>
		<dict>
			<key>begin</key>
			<string>(?![[:space:]]*($|\.\.\.|([[:upper:]][[:word:]]*\.)*([[:lower:]][[:word:]]*)[[:space:]]*(?:,|:(?![=]))))</string>
			<key>end</key>
			<string>(?=})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-block-item</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-block-or-record-or-object</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-simple-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-object-look</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-record-look</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-block-look</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-builtin</key>
		<dict>
			<key>match</key>
			<string>\b(assert|decr|failwith|fprintf|ignore|incr|land|lazy|lor|lsl|lsr|lxor|mod|new|not|printf|ref)\b|\b(raise)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control message.error</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.trycatch</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-constructor</key>
		<dict>
			<key>match</key>
			<string>\b([[:upper:]][[:word:]]*)\b(?![[:space:]]*[\.])</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.css constant.language constant.numeric</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-constructor-polymorphic</key>
		<dict>
			<key>match</key>
			<string>(`)([[:alpha:]][[:word:]]*)\b(?!\.)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.other.symbol keyword.control.less variable.parameter</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.css constant.language constant.numeric</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-for</key>
		<dict>
			<key>begin</key>
			<string>(?=\b(for)\b)</string>
			<key>end</key>
			<string>(?&lt;=})|(?=[;]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-for-head</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-block</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-for-head</key>
		<dict>
			<key>begin</key>
			<string>(?=\b(for)\b)</string>
			<key>end</key>
			<string>(?={)|(?=[;]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(for)\b</string>
					<key>end</key>
					<string>(?=\b(in)\b)|(?=[;]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pattern-variable</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(in)\b</string>
					<key>end</key>
					<string>(?=\b(to)\b)|(?=[;]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#value-expression-atomic-with-paths</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(to)\b</string>
					<key>end</key>
					<string>(?={)|(?=[;]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#value-expression-atomic-with-paths</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-block</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-fun</key>
		<dict>
			<key>begin</key>
			<string>\b(fun)\b</string>
			<key>end</key>
			<string>(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-fun-pattern-match-rule-lhs</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-fun-pattern-match-rule-rhs</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-fun-pattern-match-rule-lhs</key>
		<dict>
			<key>begin</key>
			<string>(?=\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]))|(?&lt;=fun)</string>
			<key>end</key>
			<string>(\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]))|(?==&gt;)|(?=[;\)}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#module-item-let-value-param</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
			<key>applyEndPatternLast</key>
			<true />
		</dict>
		<key>value-expression-fun-pattern-match-rule-rhs</key>
		<dict>
			<key>begin</key>
			<string>(=&gt;)</string>
			<key>end</key>
			<string>(?=[;\)}]|\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\])|\b(and)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.less</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-if-then-else</key>
		<dict>
			<key>begin</key>
			<string>\b(if)\b</string>
			<key>end</key>
			<string>(?=[;\)\]}])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(else)\b</string>
					<key>end</key>
					<string>(?=[;\)\]}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value-expression</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.conditional</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-atomic-with-paths</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.conditional</string>
				</dict>
			</dict>
			<key>applyEndPatternLast</key>
			<true />
		</dict>
		<key>value-expression-label</key>
		<dict>
			<key>begin</key>
			<string>\b([_[:lower:]][[:word:]]*)\b[[:space:]]*(::)(\?)?</string>
			<key>end</key>
			<string>(?![[:space:]])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>markup.inserted constant.language support.property-value entity.name.filename</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-lazy</key>
		<dict>
			<key>match</key>
			<string>\b(lazy)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-boolean</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-character</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-constructor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-constructor-polymorphic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-lazy</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-unit</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-literal-boolean</key>
		<dict>
			<key>name</key>
			<string>entity.other.attribute-name.css constant.language constant.numeric</string>
			<key>match</key>
			<string>\b(false|true)\b</string>
		</dict>
		<key>value-expression-literal-character</key>
		<dict>
			<key>name</key>
			<string>constant.character</string>
			<key>match</key>
			<string>(&apos;)([[:space:]]|[[:graph:]]|\\[\\&quot;&apos;ntbr]|\\[[:digit:]][[:digit:]][[:digit:]]|\\x[[:xdigit:]][[:xdigit:]]|\\o[0-3][0-7][0-7])(&apos;)</string>
		</dict>
		<key>value-expression-literal-list-or-array</key>
		<dict>
			<key>begin</key>
			<string>(\[\|?)(?![@%])</string>
			<key>end</key>
			<string>(\|?\])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-list-or-array-separator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-literal-list-or-array</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language.list</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language.list</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-literal-list-or-array-separator</key>
		<dict>
			<key>match</key>
			<string>(,)|(\.\.\.)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-literal-numeric</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([-])?([[:digit:]][_[:digit:]]*)(?:(\.)([_[:digit:]]*))?(?:([eE])([\-\+])?([[:digit:]][_[:digit:]]*))?(?![bBoOxX])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>constant.numeric</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>constant.numeric</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>([-])?(0[xX])([[:xdigit:]][_[:xdigit:]]*)(?:(\.)([_[:xdigit:]]*))?(?:([pP])([\-\+])?([[:digit:]][_[:digit:]]*))?</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.numeric</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>constant.numeric</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>constant.numeric</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>([-])?(0[oO])([0-7][_0-7]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.numeric</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>([-])?(0[bB])([0-1][_0-1]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.numeric</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>value-expression-literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;![[:alpha:]])js_expr(?!=[[:word:]])</string>
					<key>end</key>
					<string>(?&lt;=&quot;)|(\|)([_[:lower:]]*)?(})|(?=[^[:space:]&quot;{])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>({)([_[:lower:]]*)?(\|)</string>
							<key>end</key>
							<string>(?=\|\2})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>source.js</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.flow message.error</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>entity.other.attribute-name.css constant.language constant.numeric</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>keyword.control.flow message.error</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>begin</key>
							<string>&quot;</string>
							<key>end</key>
							<string>&quot;</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>source.js</string>
								</dict>
							</array>
						</dict>
					</array>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow message.error</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>string.double string.regexp</string>
					<key>begin</key>
					<string>({)([_[:lower:]]*)?(\|)</string>
					<key>end</key>
					<string>(\|)(\2)(})</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow message.error</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow message.error</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow message.error</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>string.double string.regexp</string>
					<key>begin</key>
					<string>&quot;</string>
					<key>end</key>
					<string>&quot;</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value-expression-literal-string-escape</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>value-expression-literal-string-escape</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.character</string>
					<key>match</key>
					<string>\\[\\&quot;&apos;ntbr ]|\\[[:digit:]][[:digit:]][[:digit:]]|\\x[[:xdigit:]][[:xdigit:]]|\\o[0-3][0-7][0-7]</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(@)([ \[\],.]|\\n)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.less</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(%)([ads])?</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.css constant.language constant.numeric</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.instance string.other.link variable.language</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>value-expression-literal-unit</key>
		<dict>
			<key>name</key>
			<string>constant.language.unit</string>
			<key>match</key>
			<string>\(\)</string>
		</dict>
		<key>value-expression-object-look</key>
		<dict>
			<key>begin</key>
			<string>(?:\G|^)[[:space:]]*(?=method)</string>
			<key>end</key>
			<string>(?=})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-item</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-parens</key>
		<dict>
			<key>begin</key>
			<string>(?=\()</string>
			<key>end</key>
			<string>(\))|(?=[;}]|\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#condition-lhs</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-parens-lhs</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation-rhs</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-parens-lhs</key>
		<dict>
			<key>begin</key>
			<string>(\()|(,)</string>
			<key>end</key>
			<string>(?=[?,:\)]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(module)\b</string>
					<key>end</key>
					<string>(?=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#module-path-simple</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-record-field</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\.\.\.)</string>
					<key>end</key>
					<string>(,)|(?=})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#module-path-simple-prefix</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=[\.])</string>
							<key>end</key>
							<string>(?=[:,])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>name</key>
									<string>markup.inserted constant.language support.property-value entity.name.filename</string>
									<key>match</key>
									<string>\b[[:lower:]][[:word:]]*\b</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(:)</string>
							<key>end</key>
							<string>(?=[,}])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#value-expression</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b[[:upper:]][[:word:]]*\b</string>
					<key>end</key>
					<string>(,)|(?=})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#module-path-simple-prefix</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(:)</string>
							<key>end</key>
							<string>(?=[,}])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#value-expression</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.class entity.name.class</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b([[:lower:]][[:word:]]*)\b</string>
					<key>end</key>
					<string>(,)|(?=})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(:)</string>
							<key>end</key>
							<string>(?=[,}])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#value-expression</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>markup.inserted constant.language support.property-value entity.name.filename</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js variable.interpolation keyword.operator keyword.control message.error</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>value-expression-record-item</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#module-path-simple-prefix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-record-field</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-record-look</key>
		<dict>
			<key>begin</key>
			<string>(?=\.\.\.|([[:upper:]][[:word:]]*\.)*([[:lower:]][[:word:]]*)[[:space:]]*[,:}])</string>
			<key>end</key>
			<string>(?=})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-record-item</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-switch</key>
		<dict>
			<key>begin</key>
			<string>\b(switch)\b</string>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-switch-head</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-switch-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-switch-body</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-switch-pattern-match-rule</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-switch-head</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=switch)</string>
			<key>end</key>
			<string>(?&lt;!switch)(?={)|(?=[;\)]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G[[:space:]]*+{</string>
					<key>end</key>
					<string>}[[:space:]]*+</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value-expression-block-item</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-atomic-with-paths</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-switch-pattern-match-rule</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-switch-pattern-match-rule-lhs</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-switch-pattern-match-rule-rhs</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-switch-pattern-match-rule-lhs</key>
		<dict>
			<key>begin</key>
			<string>(?=\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]))</string>
			<key>end</key>
			<string>(?==&gt;|[;\)}])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#pattern-guard</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
		</dict>
		<key>value-expression-switch-pattern-match-rule-rhs</key>
		<dict>
			<key>begin</key>
			<string>(=&gt;)</string>
			<key>end</key>
			<string>(?=}|\|(?![#\-:!?.@*/&amp;%^+&lt;=&gt;|~$\\]))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-block-item</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.less</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-try</key>
		<dict>
			<key>begin</key>
			<string>\b(try)\b</string>
			<key>end</key>
			<string>(?&lt;=})|(?=[;\)]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-try-head</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-switch-body</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.trycatch</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-try-head</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=try)</string>
			<key>end</key>
			<string>(?&lt;!try)(?={)|(?=[;\)]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G[[:space:]]*+{</string>
					<key>end</key>
					<string>}[[:space:]]*+</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#value-expression-block-item</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-atomic-with-paths</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-while</key>
		<dict>
			<key>begin</key>
			<string>\b(while)\b</string>
			<key>end</key>
			<string>(?&lt;=})|(?=[;\)]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#value-expression-while-head</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-block</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.loop</string>
				</dict>
			</dict>
		</dict>
		<key>value-expression-while-head</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=while)[[:space:]]*+</string>
			<key>end</key>
			<string>(?={)|(?=[;\)]|\b(and|as|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val|with)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#value-expression-atomic-with-paths</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>re</string>
		<string>rei</string>
	</array>
</dict>
</plist>
