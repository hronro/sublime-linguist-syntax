<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>Swift</string>
	<key>scopeName</key>
	<string>source.swift</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#root</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>async-throws</key>
		<dict>
			<key>match</key>
			<string>\b(?:(throws\s+async|rethrows\s+async)|(throws|rethrows)|(async))\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.await-must-precede-throws.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.exception.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.async.swift</string>
				</dict>
			</dict>
		</dict>
		<key>attributes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.attribute.available.swift</string>
					<key>begin</key>
					<string>((@)available)(\()</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(swift|(?:iOS|macOS|OSX|watchOS|tvOS|UIKitForMac)(?:ApplicationExtension)?)\b(?:\s+([0-9]+(?:\.[0-9]+)*\b))?</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.platform.os.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.numeric.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(introduced|deprecated|obsoleted)\s*(:)\s*</string>
							<key>end</key>
							<string>(?!\G)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>name</key>
									<string>constant.numeric.swift</string>
									<key>match</key>
									<string>\b[0-9]+(?:\.[0-9]+)*\b</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.key-value.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(message|renamed)\s*(:)\s*(?=&quot;)</string>
							<key>end</key>
							<string>(?!\G)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#literals</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.key-value.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:(\*)|\b(deprecated|unavailable)\b)\s*(.*?)(?=[,)])</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.platform.all.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other.swift</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>invalid.illegal.character-not-allowed-here.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.attribute.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.attribute.objc.swift</string>
					<key>begin</key>
					<string>((@)objc)(\()</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>entity.name.function.swift</string>
							<key>match</key>
							<string>\w*(?::(?:\w*:)*(\w*))?</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>invalid.illegal.missing-colon-after-selector-piece.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.attribute.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.attribute.swift</string>
					<key>begin</key>
					<string>(@)(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)</string>
					<key>end</key>
					<string>(?!\G\()</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>meta.arguments.attribute.swift</string>
							<key>begin</key>
							<string>\(</string>
							<key>end</key>
							<string>\)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expressions</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.arguments.begin.swift</string>
								</dict>
							</dict>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.arguments.end.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.attribute.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>builtin-functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.function.swift</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:ort(?:ed)?|plit)|contains|index|partition|f(?:i(?:lter|rst)|orEach|latMap)|with(?:MutableCharacters|CString|U(?:nsafe(?:Mutable(?:BufferPointer|Pointer(?:s|To(?:Header|Elements)))|BufferPointer)|TF8Buffer))|m(?:in|a(?:p|x)))(?=\s*[({])\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.swift</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:ymmetricDifference|t(?:oreBytes|arts|ride)|ortInPlace|u(?:ccessor|ffix|btract(?:ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(?:oldsUnique(?:Reference|OrPinnedReference)|as(?:Suffix|Prefix))|ne(?:gate(?:d)?|xt)|c(?:o(?:untByEnumerating|py(?:Bytes)?)|lamp(?:ed)?|reate)|t(?:o(?:IntMax|Opaque|UIntMax)|ake(?:RetainedValue|UnretainedValue)|r(?:uncatingRemainder|a(?:nscodedLength|ilSurrogate)))|i(?:s(?:MutableAndUniquelyReferenced(?:OrPinned)?|S(?:trictSu(?:perset(?:Of)?|bset(?:Of)?)|u(?:perset(?:Of)?|bset(?:Of)?))|Continuation|T(?:otallyOrdered|railSurrogate)|Disjoint(?:With)?|Unique(?:Reference|lyReferenced(?:OrPinned)?)|Equal|Le(?:ss(?:ThanOrEqualTo)?|adSurrogate))|n(?:sert(?:ContentsOf)?|tersect(?:ion|InPlace)?|itialize(?:Memory|From)?|dex(?:Of|ForKey)))|o(?:verlaps|bjectAt)|d(?:i(?:stance(?:To)?|vide(?:d|WithOverflow)?)|e(?:s(?:cendant|troy)|code(?:CString)?|initialize|alloc(?:ate(?:Capacity)?)?)|rop(?:First|Last))|u(?:n(?:ion(?:InPlace)?|derestimateCount|wrappedOrError)|p(?:date(?:Value)?|percased))|join(?:ed|WithSeparator)|p(?:op(?:First|Last)|ass(?:Retained|Unretained)|re(?:decessor|fix))|e(?:scape(?:d)?|n(?:code|umerate(?:d)?)|lementsEqual|xclusiveOr(?:InPlace)?)|f(?:orm(?:Remainder|S(?:ymmetricDifference|quareRoot)|TruncatingRemainder|In(?:tersection|dex)|Union)|latten|rom(?:CString(?:RepairingIllFormedUTF8)?|Opaque))|w(?:i(?:thMemoryRebound|dth)|rite(?:To)?)|l(?:o(?:wercased|ad)|e(?:adSurrogate|xicographical(?:Compare|lyPrecedes)))|a(?:ss(?:ign(?:BackwardFrom|From)?|umingMemoryBound)|d(?:d(?:ing(?:Product)?|Product|WithOverflow)?|vanced(?:By)?)|utorelease|ppend(?:ContentsOf)?|lloc(?:ate)?|bs)|r(?:ound(?:ed)?|e(?:serveCapacity|tain|duce|place(?:Range|Subrange)?|verse(?:d)?|quest(?:NativeBuffer|UniqueMutableBackingBuffer)|lease|m(?:ove(?:Range|Subrange|Value(?:ForKey)?|First|Last|A(?:tIndex|ll))?|ainder(?:WithOverflow)?)))|ge(?:nerate|t(?:Objects|Element))|m(?:in(?:imum(?:Magnitude)?|Element)|ove(?:Initialize(?:Memory|BackwardFrom|From)?|Assign(?:From)?)?|ultipl(?:y(?:WithOverflow)?|ied)|easure|a(?:ke(?:Iterator|Description)|x(?:imum(?:Magnitude)?|Element)))|bindMemory)(?=\s*\()</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.swift</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:uperclassMirror|amePositionIn|tartsWith)|nextObject|c(?:haracterAtIndex|o(?:untByEnumeratingWithState|pyWithZone)|ustom(?:Mirror|PlaygroundQuickLook))|is(?:EmptyInput|ASCII)|object(?:Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(?:oveInitializeAssignFrom|ember))(?=\s*\()</string>
				</dict>
			</array>
		</dict>
		<key>builtin-global-functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(type)(\()\s*(of)(:)</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.dynamic-type.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.variable.parameter.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.argument-label.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.swift</string>
					<key>match</key>
					<string>\b(?:anyGenerator|autoreleasepool)(?=\s*[({])\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.swift</string>
					<key>match</key>
					<string>\b(?:s(?:tride(?:of(?:Value)?)?|izeof(?:Value)?|equence|wap)|numericCast|transcode|is(?:UniquelyReferenced(?:NonObjC)?|KnownUniquelyReferenced)|zip|d(?:ump|ebugPrint)|unsafe(?:BitCast|Downcast|Unwrap|Address(?:Of)?)|pr(?:int|econdition(?:Failure)?)|fatalError|with(?:Unsafe(?:MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(?:ssert(?:ionFailure)?|lignof(?:Value)?|bs)|re(?:peatElement|adLine)|getVaList|m(?:in|ax))(?=\s*\()</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.swift</string>
					<key>match</key>
					<string>\b(?:s(?:ort|uffix|pli(?:ce|t))|insert|overlaps|d(?:istance|rop(?:First|Last))|join|prefix|extend|withUnsafe(?:MutablePointers|Pointers)|lazy|advance|re(?:flect|move(?:Range|Last|A(?:tIndex|ll))))(?=\s*\()</string>
				</dict>
			</array>
		</dict>
		<key>builtin-properties</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.variable.swift</string>
					<key>match</key>
					<string>(?&lt;=^Process\.|\WProcess\.|^CommandLine\.|\WCommandLine\.)(arguments|argc|unsafeArgv)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.variable.swift</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:t(?:artIndex|ri(?:ngValue|de))|i(?:ze|gn(?:BitIndex|ificand(?:Bit(?:Count|Pattern)|Width)?|alingNaN)?)|u(?:perclassMirror|mmary|bscriptBaseAddress))|h(?:eader|as(?:hValue|PointerRepresentation))|n(?:ulTerminatedUTF8|ext(?:Down|Up)|a(?:n|tiveOwner))|c(?:haracters|ount(?:TrailingZeros)?|ustom(?:Mirror|PlaygroundQuickLook)|apacity)|i(?:s(?:S(?:ign(?:Minus|aling(?:NaN)?)|ubnormal)|N(?:ormal|aN)|Canonical|Infinite|Zero|Empty|Finite|ASCII)|n(?:dices|finity)|dentity)|owner|de(?:scription|bugDescription)|u(?:n(?:safelyUnwrapped|icodeScalar(?:s)?|derestimatedCount)|tf(?:16|8(?:Start|C(?:String|odeUnitCount))?)|intValue|ppercaseString|lp(?:OfOne)?)|p(?:i|ointee)|e(?:ndIndex|lements|xponent(?:Bit(?:Count|Pattern))?)|value(?:s)?|keys|quietNaN|f(?:irst(?:ElementAddress(?:IfContiguous)?)?|loatingPointClass)|l(?:ittleEndian|owercaseString|eastNo(?:nzeroMagnitude|rmalMagnitude)|a(?:st|zy))|a(?:l(?:ignment|l(?:ocatedElementCount|Zeros))|rray(?:PropertyIsNativeTypeChecked)?)|ra(?:dix|wValue)|greatestFiniteMagnitude|m(?:in|emory|ax)|b(?:yteS(?:ize|wapped)|i(?:nade|tPattern|gEndian)|uffer|ase(?:Address)?))\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.variable.swift</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:boolValue|disposition|end|objectIdentifier|quickLookObject|start|valueType)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.variable.swift</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:calarValue|i(?:ze|gnalingNaN)|o(?:und|me)|uppressed|prite|et)|n(?:one|egative(?:Subnormal|Normal|Infinity|Zero))|c(?:ol(?:or|lection)|ustomized)|t(?:o(?:NearestOr(?:Even|AwayFromZero)|wardZero)|uple|ext)|i(?:nt|mage)|optional|d(?:ictionary|o(?:uble|wn))|u(?:Int|p|rl)|p(?:o(?:sitive(?:Subnormal|Normal|Infinity|Zero)|int)|lus)|e(?:rror|mptyInput)|view|quietNaN|float|a(?:ttributedString|wayFromZero)|r(?:ectangle|ange)|generated|minus|b(?:ool|ezierPath))\b</string>
				</dict>
			</array>
		</dict>
		<key>builtin-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-types-builtin-class-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types-builtin-enum-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types-builtin-protocol-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types-builtin-struct-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types-builtin-typealias</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.type.any.swift</string>
					<key>match</key>
					<string>\bAny\b</string>
				</dict>
			</array>
		</dict>
		<key>code-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>comment.line.number-sign.swift</string>
					<key>match</key>
					<string>\A^(#!).*$\n?</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.documentation.swift</string>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>end</key>
					<string>\*/</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments-nested</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.documentation.playground.swift</string>
					<key>begin</key>
					<string>/\*:</string>
					<key>end</key>
					<string>\*/</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments-nested</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.swift</string>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments-nested</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.unexpected-end-of-block-comment.swift</string>
					<key>match</key>
					<string>\*/</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>comment.line.triple-slash.documentation.swift</string>
							<key>begin</key>
							<string>///</string>
							<key>end</key>
							<string>^</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>name</key>
							<string>comment.line.double-slash.documentation.swift</string>
							<key>begin</key>
							<string>//:</string>
							<key>end</key>
							<string>^</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>name</key>
							<string>comment.line.double-slash.swift</string>
							<key>begin</key>
							<string>//</string>
							<key>end</key>
							<string>^</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>compiler-control</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>contentName</key>
					<string>comment.block.preprocessor.swift</string>
					<key>begin</key>
					<string>^\s*(#)(if|elseif)\s+(false)\b.*?(?=$|//|/\*)</string>
					<key>end</key>
					<string>(?=^\s*(#(elseif|else|endif)\b))</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.conditional.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.preprocessor.conditional.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.language.boolean.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.conditional.swift</string>
					<key>begin</key>
					<string>^\s*(#)(if|elseif)\s+</string>
					<key>end</key>
					<string>(?=\s*(?://|/\*))|$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>keyword.operator.logical.swift</string>
							<key>match</key>
							<string>(&amp;&amp;|\|\|)</string>
						</dict>
						<dict>
							<key>name</key>
							<string>constant.language.boolean.swift</string>
							<key>match</key>
							<string>\b(true|false)\b</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(arch)\s*(\()\s*(?:(arm|arm64|powerpc64|powerpc64le|i386|x86_64|s390x)|\w+)\s*(\))</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.condition.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.swift</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>support.constant.platform.architecture.swift</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(os)\s*(\()\s*(?:(macOS|OSX|iOS|tvOS|watchOS|Android|Linux|FreeBSD|Windows|PS4)|\w+)\s*(\))</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.condition.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.swift</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>support.constant.platform.os.swift</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(canImport)\s*(\()([\p{L}_][\p{L}_\p{N}\p{M}]*)(\))</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.condition.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.swift</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.module.swift</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(targetEnvironment)\s*(\()</string>
							<key>end</key>
							<string>(\))|$</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>name</key>
									<string>support.constant.platform.environment.swift</string>
									<key>match</key>
									<string>\b(simulator|UIKitForMac)\b</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.condition.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.swift</string>
								</dict>
							</dict>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(swift|compiler)\s*(\()</string>
							<key>end</key>
							<string>(\))|$</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>name</key>
									<string>keyword.operator.comparison.swift</string>
									<key>match</key>
									<string>&gt;=|&lt;</string>
								</dict>
								<dict>
									<key>name</key>
									<string>constant.numeric.swift</string>
									<key>match</key>
									<string>\b[0-9]+(?:\.[0-9]+)*\b</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.condition.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.swift</string>
								</dict>
							</dict>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.end.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.preprocessor.conditional.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.conditional.swift</string>
					<key>match</key>
					<string>^\s*(#)(else|endif)(.*?)(?=$|//|/\*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.preprocessor.conditional.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>name</key>
									<string>invalid.illegal.character-not-allowed-here.swift</string>
									<key>match</key>
									<string>\S+</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.sourcelocation.swift</string>
					<key>match</key>
					<string>^\s*(#)(sourceLocation)((\()([^)]*)(\)))(.*?)(?=$|//|/\*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.preprocessor.sourcelocation.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.swift</string>
						</dict>
						<key>5</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(file)\s*(:)\s*(?=&quot;)</string>
									<key>end</key>
									<string>(?!\G)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#literals</string>
										</dict>
									</array>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>support.variable.parameter.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.key-value.swift</string>
										</dict>
									</dict>
								</dict>
								<dict>
									<key>match</key>
									<string>(line)\s*(:)\s*([0-9]+)</string>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>support.variable.parameter.swift</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.key-value.swift</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.integer.swift</string>
										</dict>
									</dict>
								</dict>
								<dict>
									<key>name</key>
									<string>punctuation.separator.parameters.swift</string>
									<key>match</key>
									<string>,</string>
								</dict>
								<dict>
									<key>name</key>
									<string>invalid.illegal.character-not-allowed-here.swift</string>
									<key>match</key>
									<string>\S+</string>
								</dict>
							</array>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.swift</string>
						</dict>
						<key>7</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>name</key>
									<string>invalid.illegal.character-not-allowed-here.swift</string>
									<key>match</key>
									<string>\S+</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>declarations</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-function-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-typed-variable-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-import</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-precedencegroup</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-protocol</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-extension</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-typealias</string>
				</dict>
			</array>
		</dict>
		<key>expressions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#code-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#attributes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions-closure-parameter</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-global-functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-properties</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions-compound-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions-function-call-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions-subscript-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions-parenthesized-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions-member-reference</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions-availability-condition</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.variable.discard-value.swift</string>
					<key>match</key>
					<string>\b_\b</string>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.control.branch.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:if|else|guard|where|switch|case|default|fallthrough)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.transfer.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:continue|break|fallthrough|return)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.loop.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:while|for|in)\b</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(repeat)\b(\s*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.trailing.repeat.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.defer.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\bdefer\b</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:(await\s+try)|(await)\b)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.try-must-precede-await.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.await.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.exception.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:catch|throws?|rethrows|try)\b|\btry[?!]\B</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(do)\b(\s*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.exception.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.trailing.do.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.other.declaration-specifier.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:associatedtype|let|operator|typealias|var)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>storage.type.$1.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(class|enum|extension|precedencegroup|protocol|struct|actor)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>storage.modifier.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:inout|static|final|lazy|mutating|nonmutating|optional|indirect|required|override|dynamic|convenience|infix|prefix|postfix)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
					<key>match</key>
					<string>\binit[?!]|\binit\b|(?&lt;!\.)\b(?:func|deinit|subscript|didSet|get|set|willSet)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.other.declaration-specifier.accessibility.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:fileprivate|private|internal|public|open)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.other.capture-specifier.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\bunowned\((?:safe|unsafe)\)|(?&lt;!\.)\b(?:weak|unowned)\b</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)(?:(dynamicType|self)|(Protocol|Type))\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.metatype.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.language.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\b(?:super|self|Self)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.variable.swift</string>
					<key>match</key>
					<string>\B(?:#file|#filePath|#fileID|#line|#column|#function|#dsohandle)\b|\b(?:__FILE__|__LINE__|__COLUMN__|__FUNCTION__|__DSO_HANDLE__)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.import.swift</string>
					<key>match</key>
					<string>(?&lt;!\.)\bimport\b</string>
				</dict>
			</array>
		</dict>
		<key>literals</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literals-boolean</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literals-numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literals-string</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.language.nil.swift</string>
					<key>match</key>
					<string>\bnil\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.object-literal.swift</string>
					<key>match</key>
					<string>\B#(colorLiteral|imageLiteral|fileLiteral)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.function.key-path.swift</string>
					<key>match</key>
					<string>\B#keyPath\b</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\B(#selector)(\()(?:\s*(getter|setter)\s*(:))?</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.selector-reference.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.variable.parameter.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.argument-label.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.operator.type-casting.swift</string>
					<key>match</key>
					<string>\b(is\b|as([!?]\B|\b))</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
						(?=
							(?&lt;oph&gt;								# operator-head
								[/=\-+!*%&lt;&gt;&amp;|^~?]
							  | [\x{00A1}-\x{00A7}]
							  | [\x{00A9}\x{00AB}]
							  | [\x{00AC}\x{00AE}]
							  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
							  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
							  | [\x{2030}-\x{203E}]
							  | [\x{2041}-\x{2053}]
							  | [\x{2055}-\x{205E}]
							  | [\x{2190}-\x{23FF}]
							  | [\x{2500}-\x{2775}]
							  | [\x{2794}-\x{2BFF}]
							  | [\x{2E00}-\x{2E7F}]
							  | [\x{3001}-\x{3003}]
							  | [\x{3008}-\x{3030}]
							)
						  | \.
							(
								\g&lt;oph&gt;							# operator-head
							  | \.
							  | [\x{0300}-\x{036F}]				# operator-character
							  | [\x{1DC0}-\x{1DFF}]
							  | [\x{20D0}-\x{20FF}]
							  | [\x{FE00}-\x{FE0F}]
							  | [\x{FE20}-\x{FE2F}]
							  | [\x{E0100}-\x{E01EF}]
							)
						)
					</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(?&lt;=^|[\s(\[{,;:])
								(
									(?!(//|/\*|\*/))
									(
										[/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
								(?![\s)\]},;:]|\z)
							</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>name</key>
											<string>keyword.operator.increment-or-decrement.swift</string>
											<key>match</key>
											<string>\G(\+\+|\-\-)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.arithmetic.unary.swift</string>
											<key>match</key>
											<string>\G(\+|\-)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.logical.not.swift</string>
											<key>match</key>
											<string>\G!$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.bitwise.not.swift</string>
											<key>match</key>
											<string>\G~$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.custom.prefix.swift</string>
											<key>match</key>
											<string>.+</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(?&lt;!^|[\s(\[{,;:])
								(
									(?!(//|/\*|\*/))
									(
										[/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
								(?=[\s)\]},;:]|\z)
							</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>name</key>
											<string>keyword.operator.increment-or-decrement.swift</string>
											<key>match</key>
											<string>\G(\+\+|\-\-)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.increment-or-decrement.swift</string>
											<key>match</key>
											<string>\G!$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.custom.postfix.swift</string>
											<key>match</key>
											<string>.+</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(
									(?!(//|/\*|\*/))
									(
										[/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
							</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>name</key>
											<string>keyword.operator.assignment.swift</string>
											<key>match</key>
											<string>\G=$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.assignment.compound.swift</string>
											<key>match</key>
											<string>\G(\+|\-|\*|/|%|&lt;&lt;|&gt;&gt;|&amp;|\^|\||&amp;&amp;|\|\|)=$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.arithmetic.swift</string>
											<key>match</key>
											<string>\G(\+|\-|\*|/)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.arithmetic.overflow.swift</string>
											<key>match</key>
											<string>\G&amp;(\+|\-|\*)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.arithmetic.remainder.swift</string>
											<key>match</key>
											<string>\G%$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.comparison.swift</string>
											<key>match</key>
											<string>\G(==|!=|&gt;|&lt;|&gt;=|&lt;=|~=)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.coalescing.swift</string>
											<key>match</key>
											<string>\G\?\?$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.logical.swift</string>
											<key>match</key>
											<string>\G(&amp;&amp;|\|\|)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.bitwise.swift</string>
											<key>match</key>
											<string>\G(&amp;|\||\^|&lt;&lt;|&gt;&gt;)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.bitwise.swift</string>
											<key>match</key>
											<string>\G(===|!==)$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.ternary.swift</string>
											<key>match</key>
											<string>\G\?$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.custom.infix.swift</string>
											<key>match</key>
											<string>.+</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(?&lt;=^|[\s(\[{,;:])
								\.										# dot
								(
									(?!(//|/\*|\*/))
									(
										\.								# dot
									  | [/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
								(?![\s)\]},;:]|\z)
							</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>name</key>
											<string>keyword.operator.custom.prefix.dot.swift</string>
											<key>match</key>
											<string>.+</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								(?&lt;!^|[\s(\[{,;:])
								\.										# dot
								(
									(?!(//|/\*|\*/))
									(
										\.								# dot
									  | [/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
								(?=[\s)\]},;:]|\z)
							</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>name</key>
											<string>keyword.operator.custom.postfix.dot.swift</string>
											<key>match</key>
											<string>.+</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>(?x)
								\G										# Matching from the beginning ensures
																		# that we start with operator-head
								\.										# dot
								(
									(?!(//|/\*|\*/))
									(
										\.								# dot
									  | [/=\-+!*%&lt;&gt;&amp;|^~?]				# operator-head
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
								  
									  | [\x{0300}-\x{036F}]				# operator-character
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)++
							</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>name</key>
											<string>keyword.operator.range.swift</string>
											<key>match</key>
											<string>\G\.\.[.&lt;]$</string>
										</dict>
										<dict>
											<key>name</key>
											<string>keyword.operator.custom.infix.dot.swift</string>
											<key>match</key>
											<string>.+</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
					</array>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.swift</string>
					<key>match</key>
					<string>:</string>
				</dict>
			</array>
		</dict>
		<key>root</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#compiler-control</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>builtin-types-builtin-class-type</key>
		<dict>
			<key>name</key>
			<string>support.class.swift</string>
			<key>match</key>
			<string>\b(Managed(Buffer|ProtoBuffer)|NonObjectiveCBase|AnyGenerator)\b</string>
		</dict>
		<key>builtin-types-builtin-enum-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.constant.swift</string>
					<key>match</key>
					<string>\b(?:CommandLine|Process(?=\.))\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.constant.never.swift</string>
					<key>match</key>
					<string>\bNever\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:ImplicitlyUnwrappedOptional|Representation|MemoryLayout|FloatingPointClassification|SetIndexRepresentation|SetIteratorRepresentation|FloatingPointRoundingRule|UnicodeDecodingResult|Optional|DictionaryIndexRepresentation|AncestorRepresentation|DisplayStyle|PlaygroundQuickLook|Never|FloatingPointSign|Bit|DictionaryIteratorRepresentation)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:MirrorDisposition|QuickLookObject)\b</string>
				</dict>
			</array>
		</dict>
		<key>builtin-types-builtin-protocol-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:Ra(?:n(?:domAccess(?:Collection|Indexable)|geReplaceable(?:Collection|Indexable))|wRepresentable)|M(?:irrorPath|utable(?:Collection|Indexable))|Bi(?:naryFloatingPoint|twiseOperations|directional(?:Collection|Indexable))|S(?:tr(?:ideable|eamable)|igned(?:Number|Integer)|e(?:tAlgebra|quence))|Hashable|C(?:o(?:llection|mparable)|ustom(?:Reflectable|StringConvertible|DebugStringConvertible|PlaygroundQuickLookable|LeafReflectable)|VarArg)|TextOutputStream|I(?:n(?:teger(?:Arithmetic)?|dexable(?:Base)?)|teratorProtocol)|OptionSet|Un(?:signedInteger|icodeCodec)|E(?:quatable|rror|xpressibleBy(?:BooleanLiteral|String(?:Interpolation|Literal)|NilLiteral|IntegerLiteral|DictionaryLiteral|UnicodeScalarLiteral|ExtendedGraphemeClusterLiteral|FloatLiteral|ArrayLiteral))|FloatingPoint|L(?:osslessStringConvertible|azy(?:SequenceProtocol|CollectionProtocol))|A(?:nyObject|bsoluteValuable))\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:Ran(?:domAccessIndexType|geReplaceableCollectionType)|GeneratorType|M(?:irror(?:Type|PathType)|utable(?:Sliceable|CollectionType))|B(?:i(?:twiseOperationsType|directionalIndexType)|oolean(?:Type|LiteralConvertible))|S(?:tring(?:InterpolationConvertible|LiteralConvertible)|i(?:nkType|gned(?:NumberType|IntegerType))|e(?:tAlgebraType|quenceType)|liceable)|NilLiteralConvertible|C(?:ollectionType|VarArgType)|Inte(?:rvalType|ger(?:Type|LiteralConvertible|ArithmeticType))|O(?:utputStreamType|ptionSetType)|DictionaryLiteralConvertible|Un(?:signedIntegerType|icode(?:ScalarLiteralConvertible|CodecType))|E(?:rrorType|xten(?:sibleCollectionType|dedGraphemeClusterLiteralConvertible))|F(?:orwardIndexType|loat(?:ingPointType|LiteralConvertible))|A(?:nyCollectionType|rrayLiteralConvertible))\b</string>
				</dict>
			</array>
		</dict>
		<key>builtin-types-builtin-struct-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:R(?:e(?:peat(?:ed)?|versed(?:RandomAccess(?:Collection|Index)|Collection|Index))|an(?:domAccessSlice|ge(?:Replaceable(?:RandomAccessSlice|BidirectionalSlice|Slice)|Generator)?))|Generator(?:Sequence|OfOne)|M(?:irror|utable(?:Ran(?:domAccessSlice|geReplaceable(?:RandomAccessSlice|BidirectionalSlice|Slice))|BidirectionalSlice|Slice)|anagedBufferPointer)|B(?:idirectionalSlice|ool)|S(?:t(?:aticString|ri(?:ng|deT(?:hrough(?:Generator|Iterator)?|o(?:Generator|Iterator)?)))|et(?:I(?:ndex|terator))?|lice)|HalfOpenInterval|C(?:haracter(?:View)?|o(?:ntiguousArray|untable(?:Range|ClosedRange)|llectionOfOne)|OpaquePointer|losed(?:Range(?:I(?:ndex|terator))?|Interval)|VaListPointer)|I(?:n(?:t(?:16|8|32|64)?|d(?:ices|ex(?:ing(?:Generator|Iterator))?))|terator(?:Sequence|OverOne)?)|Zip2(?:Sequence|Iterator)|O(?:paquePointer|bjectIdentifier)|D(?:ictionary(?:I(?:ndex|terator)|Literal)?|ouble|efault(?:RandomAccessIndices|BidirectionalIndices|Indices))|U(?:n(?:safe(?:RawPointer|Mutable(?:RawPointer|BufferPointer|Pointer)|BufferPointer(?:Generator|Iterator)?|Pointer)|icodeScalar(?:View)?|foldSequence|managed)|TF(?:16(?:View)?|8(?:View)?|32)|Int(?:16|8|32|64)?)|Join(?:Generator|ed(?:Sequence|Iterator))|PermutationGenerator|E(?:numerate(?:Generator|Sequence|d(?:Sequence|Iterator))|mpty(?:Generator|Collection|Iterator))|Fl(?:oat(?:80)?|atten(?:Generator|BidirectionalCollection(?:Index)?|Sequence|Collection(?:Index)?|Iterator))|L(?:egacyChildren|azy(?:RandomAccessCollection|Map(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Collection|Iterator)|BidirectionalCollection|Sequence|Collection|Filter(?:Generator|BidirectionalCollection|Sequence|Collection|I(?:ndex|terator))))|A(?:ny(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Hashable|Collection|I(?:ndex|terator))|utoreleasingUnsafeMutablePointer|rray(?:Slice)?))\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:R(?:everse(?:RandomAccess(?:Collection|Index)|Collection|Index)|awByte)|Map(?:Generator|Sequence|Collection)|S(?:inkOf|etGenerator)|Zip2Generator|DictionaryGenerator|Filter(?:Generator|Sequence|Collection(?:Index)?)|LazyForwardCollection|Any(?:RandomAccessIndex|BidirectionalIndex|Forward(?:Collection|Index)))\b</string>
				</dict>
			</array>
		</dict>
		<key>builtin-types-builtin-typealias</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:Raw(?:Significand|Exponent|Value)|B(?:ooleanLiteralType|uffer|ase)|S(?:t(?:orage|r(?:i(?:ngLiteralType|de)|eam(?:1|2)))|ubSequence)|NativeBuffer|C(?:hild(?:ren)?|Bool|S(?:hort|ignedChar)|odeUnit|Char(?:16|32)?|Int|Double|Unsigned(?:Short|Char|Int|Long(?:Long)?)|Float|WideChar|Long(?:Long)?)|I(?:n(?:t(?:Max|egerLiteralType)|d(?:ices|ex(?:Distance)?))|terator)|Distance|U(?:n(?:icodeScalar(?:Type|Index|View|LiteralType)|foldFirstSequence)|TF(?:16(?:Index|View)|8Index)|IntMax)|E(?:lement(?:s)?|x(?:tendedGraphemeCluster(?:Type|LiteralType)|ponent))|V(?:oid|alue)|Key|Float(?:32|LiteralType|64)|AnyClass)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:Generator|PlaygroundQuickLook|UWord|Word)\b</string>
				</dict>
			</array>
		</dict>
		<key>comments-nested</key>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments-nested</string>
				</dict>
			</array>
		</dict>
		<key>declarations-available-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#attributes</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.async.swift</string>
					<key>match</key>
					<string>\basync\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.control.exception.swift</string>
					<key>match</key>
					<string>\b(?:throws|rethrows)\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.opaque.swift</string>
					<key>match</key>
					<string>\bsome\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>storage.modifier.swift</string>
					<key>match</key>
					<string>\binout\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>variable.language.swift</string>
					<key>match</key>
					<string>\bSelf\b</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(-&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.function.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(&amp;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.composition.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.optional.swift</string>
					<key>match</key>
					<string>[?!]</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.function.variadic-parameter.swift</string>
					<key>match</key>
					<string>\.\.\.</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.composition.swift</string>
					<key>match</key>
					<string>\bprotocol\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.metatype.swift</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:Protocol|Type)\b</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-available-types-tuple-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-available-types-collection-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-argument-clause</string>
				</dict>
			</array>
		</dict>
		<key>declarations-available-types-collection-type</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]|(?=[&gt;){}])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-available-types</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>:</string>
					<key>end</key>
					<string>(?=\]|[&gt;){}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-colon-in-dictionary-type.swift</string>
							<key>match</key>
							<string>:</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-available-types</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.collection-type.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.collection-type.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-available-types-tuple-type</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)|(?=[&gt;\]{}])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-available-types</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.tuple-type.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.tuple-type.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-extension</key>
		<dict>
			<key>name</key>
			<string>meta.definition.type.$1.swift</string>
			<key>begin</key>
			<string>\b(extension)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-where-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inheritance-clause</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.definition.type.body.swift</string>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.$1.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-available-types</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-function</key>
		<dict>
			<key>name</key>
			<string>meta.definition.function.swift</string>
			<key>begin</key>
			<string>(?x)
						\b
						(func)
						\s+
						(
							(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)
						  | (?:
								(
									(?&lt;oph&gt;								# operator-head
										[/=\-+!*%&lt;&gt;&amp;|^~?]
									  | [\x{00A1}-\x{00A7}]
									  | [\x{00A9}\x{00AB}]
									  | [\x{00AC}\x{00AE}]
									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
									  | [\x{2030}-\x{203E}]
									  | [\x{2041}-\x{2053}]
									  | [\x{2055}-\x{205E}]
									  | [\x{2190}-\x{23FF}]
									  | [\x{2500}-\x{2775}]
									  | [\x{2794}-\x{2BFF}]
									  | [\x{2E00}-\x{2E7F}]
									  | [\x{3001}-\x{3003}]
									  | [\x{3008}-\x{3030}]
									)
									(
										\g&lt;oph&gt;
									  | (?&lt;opc&gt;								# operator-character
											[\x{0300}-\x{036F}]
										  | [\x{1DC0}-\x{1DFF}]
										  | [\x{20D0}-\x{20FF}]
										  | [\x{FE00}-\x{FE0F}]
										  | [\x{FE20}-\x{FE2F}]
										  | [\x{E0100}-\x{E01EF}]
										)
									)*
								)
							  | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )+ )			# Dot operators
							)
						)
						\s*
						(?=\(|&lt;)
					</string>
			<key>end</key>
			<string>(?&lt;=\})|$(?# functions in protocol declarations or generated interfaces have no body)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-result</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#async-throws</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-where-clause</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.definition.function.body.swift</string>
					<key>begin</key>
					<string>(\{)</string>
					<key>end</key>
					<string>(\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-function-initializer</key>
		<dict>
			<key>name</key>
			<string>meta.definition.function.initializer.swift</string>
			<key>begin</key>
			<string>(?&lt;!\.)\b(init[?!]*(?# only one is valid, but we want the in⇥ snippet to produce something that looks good))\s*(?=\(|&lt;)</string>
			<key>end</key>
			<string>(?&lt;=\})|$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#async-throws</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-where-clause</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.definition.function.body.swift</string>
					<key>begin</key>
					<string>(\{)</string>
					<key>end</key>
					<string>(\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.character-not-allowed-here.swift</string>
							<key>match</key>
							<string>(?&lt;=[?!])[?!]+</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>declarations-function-result</key>
		<dict>
			<key>name</key>
			<string>meta.function-result.swift</string>
			<key>begin</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(-&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])\s*</string>
			<key>end</key>
			<string>(?!\G)(?=\{|\bwhere\b|;)|$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-available-types</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.function-result.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-generic-argument-clause</key>
		<dict>
			<key>name</key>
			<string>meta.generic-argument-clause.swift</string>
			<key>begin</key>
			<string>&lt;</string>
			<key>end</key>
			<string>&gt;|(?=[)\]{}])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-available-types</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.generic-argument-clause.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.generic-argument-clause.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-generic-parameter-clause</key>
		<dict>
			<key>name</key>
			<string>meta.generic-parameter-clause.swift</string>
			<key>begin</key>
			<string>&lt;</string>
			<key>end</key>
			<string>&gt;|(?=[^\w\d:&lt;&gt;\s,=&amp;`])(?# characters besides these are never valid in a generic param list -- even if it&apos;s not really a valid clause, we should stop trying to parse it if we see one of them.)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-where-clause</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((?!\d)\w[\w\d]*)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.language.generic-parameter.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>punctuation.separator.generic-parameters.swift</string>
					<key>match</key>
					<string>,</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.generic-parameter-constraint.swift</string>
					<key>begin</key>
					<string>(:)\s*</string>
					<key>end</key>
					<string>(?=[,&gt;]|(?!\G)\bwhere\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.swift</string>
							<key>begin</key>
							<string>\G</string>
							<key>end</key>
							<string>(?=[,&gt;]|(?!\G)\bwhere\b)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#type-identifier</string>
								</dict>
							</array>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.generic-parameter-constraint.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.generic-parameter-clause.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.generic-parameter-clause.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-generic-where-clause</key>
		<dict>
			<key>name</key>
			<string>meta.generic-where-clause.swift</string>
			<key>begin</key>
			<string>\b(where)\b\s*</string>
			<key>end</key>
			<string>(?!\G)$|(?=[&gt;{};\n]|//|/\*)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-where-clause-requirement-list</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.generic-constraint-introducer.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-generic-where-clause-requirement-list</key>
		<dict>
			<key>begin</key>
			<string>\G|,\s*</string>
			<key>end</key>
			<string>(?=[,&gt;{};\n]|//|/\*)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constraint</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-available-types</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.generic-where-clause.same-type-requirement.swift</string>
					<key>begin</key>
					<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(==)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
					<key>end</key>
					<string>(?=\s*[,&gt;{};\n]|//|/\*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-available-types</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.generic-constraint.same-type.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.generic-where-clause.conformance-requirement.swift</string>
					<key>begin</key>
					<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(:)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
					<key>end</key>
					<string>(?=\s*[,&gt;{};\n]|//|/\*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>contentName</key>
							<string>entity.other.inherited-class.swift</string>
							<key>begin</key>
							<string>\G\s*</string>
							<key>end</key>
							<string>(?=\s*[,&gt;{};\n]|//|/\*)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#declarations-available-types</string>
								</dict>
							</array>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.generic-constraint.conforms-to.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>declarations-import</key>
		<dict>
			<key>name</key>
			<string>meta.import.swift</string>
			<key>begin</key>
			<string>(?&lt;!\.)\b(import)\s+</string>
			<key>end</key>
			<string>(;)|$\n?|(?=//|/\*)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?!;|$|//|/\*)(?:(typealias|struct|class|actor|enum|protocol|var|func)\s+)?</string>
					<key>end</key>
					<string>(?=;|$|//|/\*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>entity.name.type.swift</string>
							<key>match</key>
							<string>(?x)
										(?&lt;=\G|\.)
										(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)
									</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.identifier.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.identifier.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>name</key>
							<string>entity.name.type.swift</string>
							<key>match</key>
							<string>(?x)
										(?&lt;=\G|\.)
										\$[0-9]+
									</string>
						</dict>
						<dict>
							<key>name</key>
							<string>entity.name.type.swift</string>
							<key>match</key>
							<string>(?x)
										(?&lt;=\G|\.)
										(?:
											(
												(?&lt;oph&gt;								# operator-head
													[/=\-+!*%&lt;&gt;&amp;|^~?]
												  | [\x{00A1}-\x{00A7}]
												  | [\x{00A9}\x{00AB}]
												  | [\x{00AC}\x{00AE}]
												  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
												  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
												  | [\x{2030}-\x{203E}]
												  | [\x{2041}-\x{2053}]
												  | [\x{2055}-\x{205E}]
												  | [\x{2190}-\x{23FF}]
												  | [\x{2500}-\x{2775}]
												  | [\x{2794}-\x{2BFF}]
												  | [\x{2E00}-\x{2E7F}]
												  | [\x{3001}-\x{3003}]
												  | [\x{3008}-\x{3030}]
												)
												(
													\g&lt;oph&gt;
												  | (?&lt;opc&gt;								# operator-character
														[\x{0300}-\x{036F}]
													  | [\x{1DC0}-\x{1DFF}]
													  | [\x{20D0}-\x{20FF}]
													  | [\x{FE00}-\x{FE0F}]
													  | [\x{FE20}-\x{FE2F}]
													  | [\x{E0100}-\x{E01EF}]
													)
												)*
											)
										  | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )+ )			# Dot operators
										)
										(?=\.|;|$|//|/\*|\s)
									</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>name</key>
											<string>invalid.illegal.dot-not-allowed-here.swift</string>
											<key>match</key>
											<string>\.</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>name</key>
							<string>punctuation.separator.import.swift</string>
							<key>match</key>
							<string>\.</string>
						</dict>
						<dict>
							<key>name</key>
							<string>invalid.illegal.character-not-allowed-here.swift</string>
							<key>begin</key>
							<string>(?!\s*(;|$|//|/\*))</string>
							<key>end</key>
							<string>(?=\s*(;|$|//|/\*))</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.statement.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-inheritance-clause</key>
		<dict>
			<key>name</key>
			<string>meta.inheritance-clause.swift</string>
			<key>begin</key>
			<string>(:)(?=\s*\{)|(:)\s*</string>
			<key>end</key>
			<string>(?!\G)$|(?=[={}]|(?!\G)\bwhere\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\bclass\b</string>
					<key>end</key>
					<string>(?=[={}]|(?!\G)\bwhere\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-inheritance-clause-more-types</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G</string>
					<key>end</key>
					<string>(?!\G)$|(?=[={}]|(?!\G)\bwhere\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-inheritance-clause-inherited-type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-inheritance-clause-more-types</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.empty-inheritance-clause.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance-clause.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-inheritance-clause-inherited-type</key>
		<dict>
			<key>name</key>
			<string>entity.other.inherited-class.swift</string>
			<key>begin</key>
			<string>(?=[`\p{L}_])</string>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-identifier</string>
				</dict>
			</array>
		</dict>
		<key>declarations-inheritance-clause-more-types</key>
		<dict>
			<key>name</key>
			<string>meta.inheritance-list.more-types</string>
			<key>begin</key>
			<string>,\s*</string>
			<key>end</key>
			<string>(?!\G)(?!//|/\*)|(?=[,={}]|(?!\G)\bwhere\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-inheritance-clause-inherited-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-inheritance-clause-more-types</string>
				</dict>
			</array>
		</dict>
		<key>declarations-operator</key>
		<dict>
			<key>name</key>
			<string>meta.definition.operator.swift</string>
			<key>begin</key>
			<string>(?x)
						(?:
							\b(prefix|infix|postfix)
							\s+
						)?
						\b
						(operator)
						\s+
						(
							(
								(?&lt;oph&gt;									# operator-head
									[/=\-+!*%&lt;&gt;&amp;|^~?]
								  | [\x{00A1}-\x{00A7}]
								  | [\x{00A9}\x{00AB}]
								  | [\x{00AC}\x{00AE}]
								  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
								  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
								  | [\x{2030}-\x{203E}]
								  | [\x{2041}-\x{2053}]
								  | [\x{2055}-\x{205E}]
								  | [\x{2190}-\x{23FF}]
								  | [\x{2500}-\x{2775}]
								  | [\x{2794}-\x{2BFF}]
								  | [\x{2E00}-\x{2E7F}]
								  | [\x{3001}-\x{3003}]
								  | [\x{3008}-\x{3030}]
								)
								(
									\g&lt;oph&gt;
								  | \.									# Invalid dot
								  | (?&lt;opc&gt;								# operator-character
										[\x{0300}-\x{036F}]
									  | [\x{1DC0}-\x{1DFF}]
									  | [\x{20D0}-\x{20FF}]
									  | [\x{FE00}-\x{FE0F}]
									  | [\x{FE20}-\x{FE2F}]
									  | [\x{E0100}-\x{E01EF}]
									)
								)*+
							)
						  | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )++ )			# Dot operators
						)
						\s*
					</string>
			<key>end</key>
			<string>(;)|$\n?|(?=//|/\*)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-operator-swift2</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-operator-swift3</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.character-not-allowed-here.swift</string>
					<key>match</key>
					<string>((?!$|;|//|/\*)\S)+</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.operator.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.operator.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.dot-not-allowed-here.swift</string>
							<key>match</key>
							<string>\.</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.statement.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-operator-swift2</key>
		<dict>
			<key>begin</key>
			<string>\G(\{)</string>
			<key>end</key>
			<string>(\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(associativity)\s+(left|right)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.operator.associativity.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(precedence)\s+([0-9]+)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.integer.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(assignment)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.operator.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.operator.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-operator-swift3</key>
		<dict>
			<key>match</key>
			<string>\G(:)\s*((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#types-precedencegroup</string>
						</dict>
					</array>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-parameter-clause</key>
		<dict>
			<key>name</key>
			<string>meta.parameter-clause.swift</string>
			<key>begin</key>
			<string>(\()</string>
			<key>end</key>
			<string>(\))(?:\s*(async)\b)?</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-list</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.async.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-parameter-list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>((?&lt;q1&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q1&gt;))\s+((?&lt;q2&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q2&gt;))(?=\s*:)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.swift</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)))(?=\s*:)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>:\s*(?!\s)</string>
					<key>end</key>
					<string>(?=[,)])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-available-types</string>
						</dict>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-colon-in-parameter-list.swift</string>
							<key>match</key>
							<string>:</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>=</string>
							<key>end</key>
							<string>(?=[,)])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expressions</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.assignment.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>declarations-precedencegroup</key>
		<dict>
			<key>name</key>
			<string>meta.definition.precedencegroup.swift</string>
			<key>begin</key>
			<string>\b(precedencegroup)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*(?=\{)</string>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(higherThan|lowerThan)\s*:\s*((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.modifier.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>entity.other.inherited-class.swift</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#types-precedencegroup</string>
										</dict>
									</array>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.identifier.swift</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.identifier.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(associativity)\b(?:\s*:\s*(right|left|none)\b)?</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.modifier.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other.operator.associativity.swift</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(assignment)\b(?:\s*:\s*(true|false)\b)?</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.modifier.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.language.boolean.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.precedencegroup.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.precedencegroup.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.precedencegroup.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.precedencegroup.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-protocol</key>
		<dict>
			<key>name</key>
			<string>meta.definition.type.protocol.swift</string>
			<key>begin</key>
			<string>\b(protocol)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-inheritance-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-where-clause</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.definition.type.body.swift</string>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-protocol-protocol-method</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-protocol-protocol-initializer</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-protocol-associated-type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.$1.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.$1.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-protocol-associated-type</key>
		<dict>
			<key>name</key>
			<string>meta.definition.associatedtype.swift</string>
			<key>begin</key>
			<string>\b(associatedtype)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*</string>
			<key>end</key>
			<string>(?!\G)$|(?=[;}]|$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-inheritance-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-where-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#typealias-assignment</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.declaration-specifier.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.language.associatedtype.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-protocol-protocol-initializer</key>
		<dict>
			<key>name</key>
			<string>meta.definition.function.initializer.swift</string>
			<key>begin</key>
			<string>(?&lt;!\.)\b(init[?!]*(?# only one is valid, but we want the in⇥ snippet to produce something that looks good))\s*(?=\(|&lt;)</string>
			<key>end</key>
			<string>$|(?=;|//|/\*|\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#async-throws</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-where-clause</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.function-body-not-allowed-in-protocol.swift</string>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.character-not-allowed-here.swift</string>
							<key>match</key>
							<string>(?&lt;=[?!])[?!]+</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>declarations-protocol-protocol-method</key>
		<dict>
			<key>name</key>
			<string>meta.definition.function.swift</string>
			<key>begin</key>
			<string>(?x)
								\b
								(func)
								\s+
								(
									(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)
		  						  | (?:
		  								(
		  									(?&lt;oph&gt;								# operator-head
		  										[/=\-+!*%&lt;&gt;&amp;|^~?]
		  									  | [\x{00A1}-\x{00A7}]
		  									  | [\x{00A9}\x{00AB}]
		  									  | [\x{00AC}\x{00AE}]
		  									  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
		  									  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
		  									  | [\x{2030}-\x{203E}]
		  									  | [\x{2041}-\x{2053}]
		  									  | [\x{2055}-\x{205E}]
		  									  | [\x{2190}-\x{23FF}]
		  									  | [\x{2500}-\x{2775}]
		  									  | [\x{2794}-\x{2BFF}]
		  									  | [\x{2E00}-\x{2E7F}]
		  									  | [\x{3001}-\x{3003}]
		  									  | [\x{3008}-\x{3030}]
		  									)
		  									(
		  										\g&lt;oph&gt;
		  									  | (?&lt;opc&gt;								# operator-character
		  											[\x{0300}-\x{036F}]
		  										  | [\x{1DC0}-\x{1DFF}]
		  										  | [\x{20D0}-\x{20FF}]
		  										  | [\x{FE00}-\x{FE0F}]
		  										  | [\x{FE20}-\x{FE2F}]
		  										  | [\x{E0100}-\x{E01EF}]
		  										)
		  									)*
		  								)
		  							  | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )+ )			# Dot operators
		  							)
		  						)
								\s*
								(?=\(|&lt;)
							</string>
			<key>end</key>
			<string>$|(?=;|//|/\*|\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-function-result</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#async-throws</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-where-clause</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.function-body-not-allowed-in-protocol.swift</string>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.definition.type.$1.swift</string>
					<key>begin</key>
					<string>\b(class(?!\s+(?:func|var|let)\b)|struct|actor)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
					<key>end</key>
					<string>(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-generic-parameter-clause</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-generic-where-clause</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#declarations-inheritance-clause</string>
						</dict>
						<dict>
							<key>name</key>
							<string>meta.definition.type.body.swift</string>
							<key>begin</key>
							<string>\{</string>
							<key>end</key>
							<string>\}</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.type.begin.swift</string>
								</dict>
							</dict>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.type.end.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.$1.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.$1.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-enum</string>
				</dict>
			</array>
		</dict>
		<key>declarations-type-enum</key>
		<dict>
			<key>name</key>
			<string>meta.definition.type.$1.swift</string>
			<key>begin</key>
			<string>\b(enum)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-generic-where-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-inheritance-clause</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.definition.type.body.swift</string>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-type-enum-enum-case-clause</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.$1.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.$1.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-type-enum-associated-values</key>
		<dict>
			<key>begin</key>
			<string>\G\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
										(?:(_)|((?&lt;q1&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k&lt;q1&gt;))
										\s+
										(((?&lt;q2&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k&lt;q2&gt;))
										\s*(:)</string>
					<key>end</key>
					<string>(?=[,)\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-available-types</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.distinct-labels-not-allowed.swift</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.swift</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.argument-label.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k&lt;q&gt;))\s*(:)</string>
					<key>end</key>
					<string>(?=[,)\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-available-types</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.argument-label.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?![,)\]])(?=\S)</string>
					<key>end</key>
					<string>(?=[,)\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-available-types</string>
						</dict>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-colon-in-parameter-list.swift</string>
							<key>match</key>
							<string>:</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-type-enum-enum-case</key>
		<dict>
			<key>begin</key>
			<string>(?x)((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*</string>
			<key>end</key>
			<string>(?&lt;=\))|(?![=(])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-type-enum-associated-values</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#raw-value-assignment</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.other.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-type-enum-enum-case-clause</key>
		<dict>
			<key>begin</key>
			<string>\b(case)\b\s*</string>
			<key>end</key>
			<string>(?=[;}])|(?!\G)(?!//|/\*)(?=[^\s,])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-type-enum-enum-case</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#more-cases</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.enum.case.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-type-enum-more-cases</key>
		<dict>
			<key>name</key>
			<string>meta.enum-case.more-cases</string>
			<key>begin</key>
			<string>,\s*</string>
			<key>end</key>
			<string>(?!\G)(?!//|/\*)(?=[;}]|[^\s,])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-type-enum-enum-case</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declarations-type-enum-more-cases</string>
				</dict>
			</array>
		</dict>
		<key>declarations-type-enum-raw-value-assignment</key>
		<dict>
			<key>begin</key>
			<string>(=)\s*</string>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literals</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-type-identifier</key>
		<dict>
			<key>begin</key>
			<string>((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*</string>
			<key>end</key>
			<string>(?!&lt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=&lt;)</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-generic-argument-clause</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.type-name.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#builtin-types</string>
						</dict>
					</array>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-typealias</key>
		<dict>
			<key>name</key>
			<string>meta.definition.typealias.swift</string>
			<key>begin</key>
			<string>\b(typealias)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*</string>
			<key>end</key>
			<string>(?!\G)$|(?=;|//|/\*|$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?=&lt;)</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#declarations-generic-parameter-clause</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#typealias-assignment</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.declaration-specifier.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.typealias.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-typealias-assignment</key>
		<dict>
			<key>begin</key>
			<string>(=)\s*</string>
			<key>end</key>
			<string>(?!\G)$|(?=;|//|/\*|$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-available-types</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-typed-variable-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
						\b(let|var)\b\s+
						(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)\s*
						:
					</string>
			<key>end</key>
			<string>(?=$|[={])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declarations-available-types</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.declaration-specifier.swift</string>
				</dict>
			</dict>
		</dict>
		<key>declarations-types-precedencegroup</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>support.type.swift</string>
					<key>match</key>
					<string>\b(?:BitwiseShift|Assignment|RangeFormation|Casting|Addition|NilCoalescing|Comparison|LogicalConjunction|LogicalDisjunction|Default|Ternary|Multiplication|FunctionArrow)Precedence\b</string>
				</dict>
			</array>
		</dict>
		<key>expressions-availability-condition</key>
		<dict>
			<key>begin</key>
			<string>\B(#(?:un)?available)(\()</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\s*\b((?:iOS|macOS|OSX|watchOS|tvOS|UIKitForMac)(?:ApplicationExtension)?)\b(?:\s+([0-9]+(?:\.[0-9]+)*\b))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.platform.os.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(\*)\s*(.*?)(?=[,)])</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.platform.all.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.character-not-allowed-here.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.character-not-allowed-here.swift</string>
					<key>match</key>
					<string>[^\s,)]+</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.availability-condition.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>expressions-closure-parameter</key>
		<dict>
			<key>name</key>
			<string>variable.language.closure-parameter.swift</string>
			<key>match</key>
			<string>\$[0-9]+</string>
		</dict>
		<key>expressions-compound-name</key>
		<dict>
			<key>match</key>
			<string>(?x)
						((?&lt;q1&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q1&gt;))       		# function name
						\(
							(
								(
									((?&lt;q2&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q2&gt;)) 	# argument label
									:												# colon
								)+
							)
						\)
					</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.compound-name.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.entity.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.entity.swift</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>entity.name.function.compound-name.swift</string>
							<key>match</key>
							<string>(?&lt;q&gt;`?)(?!_:)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;):</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.entity.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.entity.swift</string>
								</dict>
							</dict>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>expressions-expression-element-list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*(:)</string>
					<key>end</key>
					<string>(?=[,)\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.any-method.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.argument-label.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?![,)\]])(?=\S)</string>
					<key>end</key>
					<string>(?=[,)\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>expressions-function-call-expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>meta.function-call.swift</string>
					<key>begin</key>
					<string>((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*(\()</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions-expression-element-list</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.any-method.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.function-call.swift</string>
					<key>begin</key>
					<string>(?&lt;=[`\])}&gt;\p{L}_\p{N}\p{M}])\s*(\()</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions-expression-element-list</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.end.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>expressions-member-reference</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.identifier.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>expressions-parenthesized-expression</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>(\))\s*((?:\b(?:async|throws|rethrows)\s)*)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions-expression-element-list</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.tuple.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.tuple.end.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.rethrows-only-allowed-on-function-declarations.swift</string>
							<key>match</key>
							<string>\brethrows\b</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#async-throws</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>expressions-subscript-expression</key>
		<dict>
			<key>name</key>
			<string>meta.subscript-expression.swift</string>
			<key>begin</key>
			<string>(?&lt;=[`\p{L}_\p{N}\p{M}])\s*(\[)</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions-expression-element-list</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.begin.swift</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.arguments.end.swift</string>
				</dict>
			</dict>
		</dict>
		<key>literals-boolean</key>
		<dict>
			<key>name</key>
			<string>constant.language.boolean.swift</string>
			<key>match</key>
			<string>\b(true|false)\b</string>
		</dict>
		<key>literals-numeric</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.numeric.float.decimal.swift</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9][0-9_]*(?=\.[0-9]|[eE])(?:\.[0-9][0-9_]*)?(?:[eE][-+]?[0-9][0-9_]*)?\b(?!\.[0-9])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.numeric.float.hexadecimal.swift</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\.[0-9a-fA-F][0-9a-fA-F_]*)?[pP][-+]?[0-9][0-9_]*\b(?!\.[0-9])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.numeric.float.invalid-exponent.swift</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\.[0-9a-fA-F][0-9a-fA-F_]*)?(?:[pP][-+]?\w*)\b(?!\.[0-9])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.numeric.float.missing-exponent.swift</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)\.[0-9][\w.]*</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.numeric.float.missing-leading-zero.swift</string>
					<key>match</key>
					<string>(?&lt;=\s|^)\-?\.[0-9][\w.]*</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.numeric.leading-underscore.swift</string>
					<key>match</key>
					<string>(\B\-|\b)0[box]_[0-9a-fA-F_]*(?:[pPeE][+-]?\w+)?[\w.]+</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9]+\b</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.numeric.integer.binary.swift</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)0b[01][01_]*\b(?!\.[0-9])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.numeric.integer.octal.swift</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)0o[0-7][0-7_]*\b(?!\.[0-9])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.numeric.integer.decimal.swift</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9][0-9_]*\b(?!\.[0-9])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.numeric.integer.hexadecimal.swift</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)0x[0-9a-fA-F][0-9a-fA-F_]*\b(?!\.[0-9])</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.numeric.other.swift</string>
					<key>match</key>
					<string>(\B\-|\b)[0-9][\w.]*</string>
				</dict>
			</array>
		</dict>
		<key>literals-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>string.quoted.double.block.swift</string>
					<key>begin</key>
					<string>&quot;&quot;&quot;</string>
					<key>end</key>
					<string>&quot;&quot;&quot;(#*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.content-after-opening-delimiter.swift</string>
							<key>match</key>
							<string>\G.+(?=&quot;&quot;&quot;)|\G.+</string>
						</dict>
						<dict>
							<key>name</key>
							<string>constant.character.escape.newline.swift</string>
							<key>match</key>
							<string>\\\s*\n</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literals-string-string-guts</string>
						</dict>
						<dict>
							<key>name</key>
							<string>invalid.illegal.content-before-closing-delimiter.swift</string>
							<key>match</key>
							<string>\S((?!\\\().)*(?=&quot;&quot;&quot;)</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-closing-delimiter.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>string.quoted.double.block.raw.swift</string>
					<key>begin</key>
					<string>#&quot;&quot;&quot;</string>
					<key>end</key>
					<string>&quot;&quot;&quot;#(#*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.content-after-opening-delimiter.swift</string>
							<key>match</key>
							<string>\G.+(?=&quot;&quot;&quot;)|\G.+</string>
						</dict>
						<dict>
							<key>name</key>
							<string>constant.character.escape.newline.swift</string>
							<key>match</key>
							<string>\\#\s*\n</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literals-string-raw-string-guts</string>
						</dict>
						<dict>
							<key>name</key>
							<string>invalid.illegal.content-before-closing-delimiter.swift</string>
							<key>match</key>
							<string>\S((?!\\#\().)*(?=&quot;&quot;&quot;)</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-closing-delimiter.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>string.quoted.double.block.raw.swift</string>
					<key>begin</key>
					<string>(##+)&quot;&quot;&quot;</string>
					<key>end</key>
					<string>&quot;&quot;&quot;\1(#*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.content-after-opening-delimiter.swift</string>
							<key>match</key>
							<string>\G.+(?=&quot;&quot;&quot;)|\G.+</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-closing-delimiter.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>string.quoted.double.single-line.swift</string>
					<key>begin</key>
					<string>&quot;</string>
					<key>end</key>
					<string>&quot;(#*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.returns-not-allowed.swift</string>
							<key>match</key>
							<string>\r|\n</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literals-string-string-guts</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-closing-delimiter.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>string.quoted.double.single-line.raw.swift</string>
					<key>begin</key>
					<string>(##+)&quot;</string>
					<key>end</key>
					<string>&quot;\1(#*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.returns-not-allowed.swift</string>
							<key>match</key>
							<string>\r|\n</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.raw.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.raw.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-closing-delimiter.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>string.quoted.double.single-line.raw.swift</string>
					<key>begin</key>
					<string>#&quot;</string>
					<key>end</key>
					<string>&quot;#(#*)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>invalid.illegal.returns-not-allowed.swift</string>
							<key>match</key>
							<string>\r|\n</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literals-string-raw-string-guts</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.raw.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.raw.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.extra-closing-delimiter.swift</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>literals-string-raw-string-guts</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.character.escape.swift</string>
					<key>match</key>
					<string>\\#[0\\tnr&quot;&apos;]</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.character.escape.unicode.swift</string>
					<key>match</key>
					<string>\\#u\{[0-9a-fA-F]{1,8}\}</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.embedded.line.swift</string>
					<key>contentName</key>
					<string>source.swift</string>
					<key>begin</key>
					<string>\\#\(</string>
					<key>end</key>
					<string>(\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>end</key>
							<string>\)</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.end.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>source.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.escape-not-recognized</string>
					<key>match</key>
					<string>\\#.</string>
				</dict>
			</array>
		</dict>
		<key>literals-string-string-guts</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.character.escape.swift</string>
					<key>match</key>
					<string>\\[0\\tnr&quot;&apos;]</string>
				</dict>
				<dict>
					<key>name</key>
					<string>constant.character.escape.unicode.swift</string>
					<key>match</key>
					<string>\\u\{[0-9a-fA-F]{1,8}\}</string>
				</dict>
				<dict>
					<key>name</key>
					<string>meta.embedded.line.swift</string>
					<key>contentName</key>
					<string>source.swift</string>
					<key>begin</key>
					<string>\\\(</string>
					<key>end</key>
					<string>(\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>end</key>
							<string>\)</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.begin.swift</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.end.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>source.swift</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.escape-not-recognized</string>
					<key>match</key>
					<string>\\.</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>swift</string>
	</array>
</dict>
</plist>
