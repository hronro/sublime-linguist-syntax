<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>Type Language</string>
	<key>scopeName</key>
	<string>source.tl</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#triple-statement</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#combinator-declaration</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>combinator-args</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#combinator-args-member</string>
				</dict>
			</array>
		</dict>
		<key>combinator-args-member</key>
		<dict>
			<key>name</key>
			<string>meta.combinator.arg.tl</string>
			<key>begin</key>
			<string>([_$[:alpha:]][_$[:alnum:]]*)(\:)(([_$[:alpha:]][_$[:alnum:]]*)|(#))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.definition.combinator.arg.tl variable.other.tl</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.key-value.tl</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.tl</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.other.hash.tl</string>
				</dict>
			</dict>
		</dict>
		<key>combinator-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#combinator-declaration-with-hash</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#combinator-declaration-without-hash</string>
				</dict>
			</array>
		</dict>
		<key>combinator-declaration-with-hash</key>
		<dict>
			<key>name</key>
			<string>meta.combinator.declaration.tl</string>
			<key>begin</key>
			<string>(([_$\w]+)(\b\.))?([_$\w]*)(\b#)([[:alpha:][:alnum:]]*)\s*</string>
			<key>end</key>
			<string>\;\s*</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>punctuation.namespace.tl</string>
					<key>match</key>
					<string>\.</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#combinator-opt-args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#combinator-args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#combinator-result-type</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(=)\s*</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.tl</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.definition.combinator.tl variable.other.tl</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>meta.definition.combinator.tl variable.other.tl</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>storage.type.tl</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>storage.type.tl</string>
				</dict>
			</dict>
		</dict>
		<key>combinator-declaration-without-hash</key>
		<dict>
			<key>name</key>
			<string>meta.combinator.declaration.tl</string>
			<key>begin</key>
			<string>(([_$\w]+)(\.))?([_$\w]*)(?= )</string>
			<key>end</key>
			<string>\;\s*</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>punctuation.namespace.tl</string>
					<key>match</key>
					<string>\.</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#combinator-opt-args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#combinator-args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#combinator-result-type</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(=)\s*</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.tl</string>
						</dict>
					</dict>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.definition.combinator.tl variable.other.tl</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>meta.definition.combinator.tl variable.other.tl</string>
				</dict>
			</dict>
		</dict>
		<key>combinator-opt-args</key>
		<dict>
			<key>name</key>
			<string>meta.object.type.tl</string>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#combinator-args-member</string>
				</dict>
			</array>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tl</string>
				</dict>
			</dict>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tl</string>
				</dict>
			</dict>
		</dict>
		<key>combinator-result-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.tl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.tl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>entity.name.type.tl</string>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>comment.block.documentation.tl</string>
					<key>begin</key>
					<string>/\*\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.tl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.block.tl</string>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.tl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>name</key>
					<string>comment.line.double-slash.tl</string>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.tl</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.other.hash.tl</string>
					<key>match</key>
					<string>\#</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.other.questionmark.tl</string>
					<key>match</key>
					<string>\?</string>
				</dict>
				<dict>
					<key>name</key>
					<string>keyword.other.percent.tl</string>
					<key>match</key>
					<string>\%</string>
				</dict>
			</array>
		</dict>
		<key>triple-statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>keyword.control.triple.tl</string>
					<key>begin</key>
					<string>\-\-\-</string>
					<key>end</key>
					<string>\-\-\-</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>keyword.control.triple.name.tl</string>
							<key>match</key>
							<string>\b(types|functions)\b</string>
						</dict>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
							<key>match</key>
							<string>\b(.*)\b</string>
						</dict>
					</array>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.triple.open.tl</string>
						</dict>
					</dict>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.triple.close.tl</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
	</dict>
	<key>fileTypes</key>
	<array>
		<string>tl</string>
	</array>
</dict>
</plist>
